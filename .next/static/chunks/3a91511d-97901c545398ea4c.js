"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[814],{3438:function(e,t,r){r.r(t),r.d(t,{Account:function(){return Account},AddressLookupTableAccount:function(){return AddressLookupTableAccount},AddressLookupTableInstruction:function(){return AddressLookupTableInstruction},AddressLookupTableProgram:function(){return AddressLookupTableProgram},Authorized:function(){return Authorized},BLOCKHASH_CACHE_TIMEOUT_MS:function(){return ea},BPF_LOADER_DEPRECATED_PROGRAM_ID:function(){return T},BPF_LOADER_PROGRAM_ID:function(){return Q},BpfLoader:function(){return BpfLoader},COMPUTE_BUDGET_INSTRUCTION_LAYOUTS:function(){return tL},ComputeBudgetInstruction:function(){return ComputeBudgetInstruction},ComputeBudgetProgram:function(){return ComputeBudgetProgram},Connection:function(){return Connection},Ed25519Program:function(){return Ed25519Program},Enum:function(){return Enum},EpochSchedule:function(){return EpochSchedule},FeeCalculatorLayout:function(){return G},Keypair:function(){return Keypair},LAMPORTS_PER_SOL:function(){return tH},LOOKUP_TABLE_INSTRUCTION_LAYOUTS:function(){return tO},Loader:function(){return Loader},Lockup:function(){return Lockup},MAX_SEED_LENGTH:function(){return x},Message:function(){return Message},MessageAccountKeys:function(){return MessageAccountKeys},MessageV0:function(){return MessageV0},NONCE_ACCOUNT_LENGTH:function(){return Z},NonceAccount:function(){return NonceAccount},PACKET_DATA_SIZE:function(){return v},PUBLIC_KEY_LENGTH:function(){return E},PublicKey:function(){return PublicKey},SIGNATURE_LENGTH_IN_BYTES:function(){return K},SOLANA_SCHEMA:function(){return P},STAKE_CONFIG_ID:function(){return tU},STAKE_INSTRUCTION_LAYOUTS:function(){return tq},SYSTEM_INSTRUCTION_LAYOUTS:function(){return X},SYSVAR_CLOCK_PUBKEY:function(){return z},SYSVAR_EPOCH_SCHEDULE_PUBKEY:function(){return U},SYSVAR_INSTRUCTIONS_PUBKEY:function(){return q},SYSVAR_RECENT_BLOCKHASHES_PUBKEY:function(){return j},SYSVAR_RENT_PUBKEY:function(){return D},SYSVAR_REWARDS_PUBKEY:function(){return J},SYSVAR_SLOT_HASHES_PUBKEY:function(){return M},SYSVAR_SLOT_HISTORY_PUBKEY:function(){return V},SYSVAR_STAKE_HISTORY_PUBKEY:function(){return $},Secp256k1Program:function(){return Secp256k1Program},SendTransactionError:function(){return SendTransactionError},SolanaJSONRPCError:function(){return SolanaJSONRPCError},SolanaJSONRPCErrorCode:function(){return F},StakeAuthorizationLayout:function(){return tj},StakeInstruction:function(){return StakeInstruction},StakeProgram:function(){return StakeProgram},Struct:function(){return Struct},SystemInstruction:function(){return SystemInstruction},SystemProgram:function(){return SystemProgram},Transaction:function(){return Transaction},TransactionExpiredBlockheightExceededError:function(){return TransactionExpiredBlockheightExceededError},TransactionExpiredNonceInvalidError:function(){return TransactionExpiredNonceInvalidError},TransactionExpiredTimeoutError:function(){return TransactionExpiredTimeoutError},TransactionInstruction:function(){return TransactionInstruction},TransactionMessage:function(){return TransactionMessage},TransactionStatus:function(){return N},VALIDATOR_INFO_KEY:function(){return tM},VERSION_PREFIX_MASK:function(){return B},VOTE_PROGRAM_ID:function(){return t$},ValidatorInfo:function(){return ValidatorInfo},VersionedMessage:function(){return L},VersionedTransaction:function(){return VersionedTransaction},VoteAccount:function(){return VoteAccount},VoteAuthorizationLayout:function(){return tJ},VoteInit:function(){return VoteInit},VoteInstruction:function(){return VoteInstruction},VoteProgram:function(){return VoteProgram},clusterApiUrl:function(){return clusterApiUrl},sendAndConfirmRawTransaction:function(){return sendAndConfirmRawTransaction},sendAndConfirmTransaction:function(){return sendAndConfirmTransaction}});var n,i,s,o,a=r(7133),c=r(1183),u=r(6662),l=r.n(u),d=r(4462),h=r.n(d),g=r(9802),p=r(4453),y=r(2452),m=r(6725),f=r(3142),b=r(152),k=r.n(b),S=r(8450),w=r(9658),I=r(9604);let _=c.UN.utils.randomPrivateKey,generateKeypair=()=>{let e=c.UN.utils.randomPrivateKey(),t=R(e),r=new Uint8Array(64);return r.set(e),r.set(t,32),{publicKey:t,secretKey:r}},R=c.UN.getPublicKey;function isOnCurve(e){try{return c.UN.ExtendedPoint.fromHex(e),!0}catch{return!1}}let sign=(e,t)=>c.UN.sign(e,t.slice(0,32)),A=c.UN.verify,toBuffer=e=>a.Buffer.isBuffer(e)?e:e instanceof Uint8Array?a.Buffer.from(e.buffer,e.byteOffset,e.byteLength):a.Buffer.from(e);let Struct=class Struct{constructor(e){Object.assign(this,e)}encode(){return a.Buffer.from((0,p.serialize)(P,this))}static decode(e){return(0,p.deserialize)(P,this,e)}static decodeUnchecked(e){return(0,p.deserializeUnchecked)(P,this,e)}};let Enum=class Enum extends Struct{constructor(e){if(super(e),this.enum="",1!==Object.keys(e).length)throw Error("Enum can only take single value");Object.keys(e).map(e=>{this.enum=e})}};let P=new Map,x=32,E=32;function isPublicKeyData(e){return void 0!==e._bn}let C=1;let PublicKey=class PublicKey extends Struct{constructor(e){if(super({}),this._bn=void 0,isPublicKeyData(e))this._bn=e._bn;else{if("string"==typeof e){let t=h().decode(e);if(t.length!=E)throw Error("Invalid public key input");this._bn=new(l())(t)}else this._bn=new(l())(e);if(this._bn.byteLength()>E)throw Error("Invalid public key input")}}static unique(){let e=new PublicKey(C);return C+=1,new PublicKey(e.toBuffer())}equals(e){return this._bn.eq(e._bn)}toBase58(){return h().encode(this.toBytes())}toJSON(){return this.toBase58()}toBytes(){let e=this.toBuffer();return new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}toBuffer(){let e=this._bn.toArrayLike(a.Buffer);if(e.length===E)return e;let t=a.Buffer.alloc(32);return e.copy(t,32-e.length),t}get[Symbol.toStringTag](){return`PublicKey(${this.toString()})`}toString(){return this.toBase58()}static async createWithSeed(e,t,r){let n=a.Buffer.concat([e.toBuffer(),a.Buffer.from(t),r.toBuffer()]),i=(0,g.JQ)(n);return new PublicKey(i)}static createProgramAddressSync(e,t){let r=a.Buffer.alloc(0);e.forEach(function(e){if(e.length>x)throw TypeError("Max seed length exceeded");r=a.Buffer.concat([r,toBuffer(e)])}),r=a.Buffer.concat([r,t.toBuffer(),a.Buffer.from("ProgramDerivedAddress")]);let n=(0,g.JQ)(r);if(isOnCurve(n))throw Error("Invalid seeds, address must fall off the curve");return new PublicKey(n)}static async createProgramAddress(e,t){return this.createProgramAddressSync(e,t)}static findProgramAddressSync(e,t){let r,n=255;for(;0!=n;){try{let i=e.concat(a.Buffer.from([n]));r=this.createProgramAddressSync(i,t)}catch(e){if(e instanceof TypeError)throw e;n--;continue}return[r,n]}throw Error("Unable to find a viable program address nonce")}static async findProgramAddress(e,t){return this.findProgramAddressSync(e,t)}static isOnCurve(e){let t=new PublicKey(e);return isOnCurve(t.toBytes())}};PublicKey.default=new PublicKey("11111111111111111111111111111111"),P.set(PublicKey,{kind:"struct",fields:[["_bn","u256"]]});let Account=class Account{constructor(e){if(this._publicKey=void 0,this._secretKey=void 0,e){let t=toBuffer(e);if(64!==e.length)throw Error("bad secret key size");this._publicKey=t.slice(32,64),this._secretKey=t.slice(0,32)}else this._secretKey=toBuffer(_()),this._publicKey=toBuffer(R(this._secretKey))}get publicKey(){return new PublicKey(this._publicKey)}get secretKey(){return a.Buffer.concat([this._secretKey,this._publicKey],64)}};let T=new PublicKey("BPFLoader1111111111111111111111111111111111"),v=1232,B=127,K=64;let TransactionExpiredBlockheightExceededError=class TransactionExpiredBlockheightExceededError extends Error{constructor(e){super(`Signature ${e} has expired: block height exceeded.`),this.signature=void 0,this.signature=e}};Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype,"name",{value:"TransactionExpiredBlockheightExceededError"});let TransactionExpiredTimeoutError=class TransactionExpiredTimeoutError extends Error{constructor(e,t){super(`Transaction was not confirmed in ${t.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${e} using the Solana Explorer or CLI tools.`),this.signature=void 0,this.signature=e}};Object.defineProperty(TransactionExpiredTimeoutError.prototype,"name",{value:"TransactionExpiredTimeoutError"});let TransactionExpiredNonceInvalidError=class TransactionExpiredNonceInvalidError extends Error{constructor(e){super(`Signature ${e} has expired: the nonce is no longer valid.`),this.signature=void 0,this.signature=e}};Object.defineProperty(TransactionExpiredNonceInvalidError.prototype,"name",{value:"TransactionExpiredNonceInvalidError"});let MessageAccountKeys=class MessageAccountKeys{constructor(e,t){this.staticAccountKeys=void 0,this.accountKeysFromLookups=void 0,this.staticAccountKeys=e,this.accountKeysFromLookups=t}keySegments(){let e=[this.staticAccountKeys];return this.accountKeysFromLookups&&(e.push(this.accountKeysFromLookups.writable),e.push(this.accountKeysFromLookups.readonly)),e}get(e){for(let t of this.keySegments()){if(e<t.length)return t[e];e-=t.length}}get length(){return this.keySegments().flat().length}compileInstructions(e){if(this.length>256)throw Error("Account index overflow encountered during compilation");let t=new Map;this.keySegments().flat().forEach((e,r)=>{t.set(e.toBase58(),r)});let findKeyIndex=e=>{let r=t.get(e.toBase58());if(void 0===r)throw Error("Encountered an unknown instruction account key during compilation");return r};return e.map(e=>({programIdIndex:findKeyIndex(e.programId),accountKeyIndexes:e.keys.map(e=>findKeyIndex(e.pubkey)),data:e.data}))}};let publicKey=(e="publicKey")=>y.Ik(32,e),signature=(e="signature")=>y.Ik(64,e),rustString=(e="string")=>{let t=y.n_([y.Jq("length"),y.Jq("lengthPadding"),y.Ik(y.cv(y.Jq(),-8),"chars")],e),r=t.decode.bind(t),n=t.encode.bind(t);return t.decode=(e,t)=>{let n=r(e,t);return n.chars.toString()},t.encode=(e,t,r)=>{let i={chars:a.Buffer.from(e,"utf8")};return n(i,t,r)},t.alloc=e=>y.Jq().span+y.Jq().span+a.Buffer.from(e,"utf8").length,t};function getAlloc(e,t){let getItemAlloc=e=>{if(e.span>=0)return e.span;if("function"==typeof e.alloc)return e.alloc(t[e.property]);if("count"in e&&"elementLayout"in e){let r=t[e.property];if(Array.isArray(r))return r.length*getItemAlloc(e.elementLayout)}else if("fields"in e)return getAlloc({layout:e},t[e.property]);return 0},r=0;return e.layout.fields.forEach(e=>{r+=getItemAlloc(e)}),r}function decodeLength(e){let t=0,r=0;for(;;){let n=e.shift();if(t|=(127&n)<<7*r,r+=1,(128&n)==0)break}return t}function encodeLength(e,t){let r=t;for(;;){let t=127&r;if(0==(r>>=7)){e.push(t);break}t|=128,e.push(t)}}function assert(e,t){if(!e)throw Error(t||"Assertion failed")}let CompiledKeys=class CompiledKeys{constructor(e,t){this.payer=void 0,this.keyMetaMap=void 0,this.payer=e,this.keyMetaMap=t}static compile(e,t){let r=new Map,getOrInsertDefault=e=>{let t=e.toBase58(),n=r.get(t);return void 0===n&&(n={isSigner:!1,isWritable:!1,isInvoked:!1},r.set(t,n)),n},n=getOrInsertDefault(t);for(let t of(n.isSigner=!0,n.isWritable=!0,e))for(let e of(getOrInsertDefault(t.programId).isInvoked=!0,t.keys)){let t=getOrInsertDefault(e.pubkey);t.isSigner||=e.isSigner,t.isWritable||=e.isWritable}return new CompiledKeys(t,r)}getMessageComponents(){let e=[...this.keyMetaMap.entries()];assert(e.length<=256,"Max static account keys length exceeded");let t=e.filter(([,e])=>e.isSigner&&e.isWritable),r=e.filter(([,e])=>e.isSigner&&!e.isWritable),n=e.filter(([,e])=>!e.isSigner&&e.isWritable),i=e.filter(([,e])=>!e.isSigner&&!e.isWritable),s={numRequiredSignatures:t.length+r.length,numReadonlySignedAccounts:r.length,numReadonlyUnsignedAccounts:i.length};{assert(t.length>0,"Expected at least one writable signer key");let[e]=t[0];assert(e===this.payer.toBase58(),"Expected first writable signer key to be the fee payer")}let o=[...t.map(([e])=>new PublicKey(e)),...r.map(([e])=>new PublicKey(e)),...n.map(([e])=>new PublicKey(e)),...i.map(([e])=>new PublicKey(e))];return[s,o]}extractTableLookup(e){let[t,r]=this.drainKeysFoundInLookupTable(e.state.addresses,e=>!e.isSigner&&!e.isInvoked&&e.isWritable),[n,i]=this.drainKeysFoundInLookupTable(e.state.addresses,e=>!e.isSigner&&!e.isInvoked&&!e.isWritable);if(0!==t.length||0!==n.length)return[{accountKey:e.key,writableIndexes:t,readonlyIndexes:n},{writable:r,readonly:i}]}drainKeysFoundInLookupTable(e,t){let r=[],n=[];for(let[i,s]of this.keyMetaMap.entries())if(t(s)){let t=new PublicKey(i),s=e.findIndex(e=>e.equals(t));s>=0&&(assert(s<256,"Max lookup table index exceeded"),r.push(s),n.push(t),this.keyMetaMap.delete(i))}return[r,n]}};let O="Reached end of buffer unexpectedly";function guardedShift(e){if(0===e.length)throw Error(O);return e.shift()}function guardedSplice(e,...t){let[r]=t;if(2===t.length?r+(t[1]??0)>e.length:r>=e.length)throw Error(O);return e.splice(...t)}let Message=class Message{constructor(e){this.header=void 0,this.accountKeys=void 0,this.recentBlockhash=void 0,this.instructions=void 0,this.indexToProgramIds=new Map,this.header=e.header,this.accountKeys=e.accountKeys.map(e=>new PublicKey(e)),this.recentBlockhash=e.recentBlockhash,this.instructions=e.instructions,this.instructions.forEach(e=>this.indexToProgramIds.set(e.programIdIndex,this.accountKeys[e.programIdIndex]))}get version(){return"legacy"}get staticAccountKeys(){return this.accountKeys}get compiledInstructions(){return this.instructions.map(e=>({programIdIndex:e.programIdIndex,accountKeyIndexes:e.accounts,data:h().decode(e.data)}))}get addressTableLookups(){return[]}getAccountKeys(){return new MessageAccountKeys(this.staticAccountKeys)}static compile(e){let t=CompiledKeys.compile(e.instructions,e.payerKey),[r,n]=t.getMessageComponents(),i=new MessageAccountKeys(n),s=i.compileInstructions(e.instructions).map(e=>({programIdIndex:e.programIdIndex,accounts:e.accountKeyIndexes,data:h().encode(e.data)}));return new Message({header:r,accountKeys:n,recentBlockhash:e.recentBlockhash,instructions:s})}isAccountSigner(e){return e<this.header.numRequiredSignatures}isAccountWritable(e){let t=this.header.numRequiredSignatures;if(e>=this.header.numRequiredSignatures){let r=this.accountKeys.length-t,n=r-this.header.numReadonlyUnsignedAccounts;return e-t<n}{let r=t-this.header.numReadonlySignedAccounts;return e<r}}isProgramId(e){return this.indexToProgramIds.has(e)}programIds(){return[...this.indexToProgramIds.values()]}nonProgramIds(){return this.accountKeys.filter((e,t)=>!this.isProgramId(t))}serialize(){let e=this.accountKeys.length,t=[];encodeLength(t,e);let r=this.instructions.map(e=>{let{accounts:t,programIdIndex:r}=e,n=Array.from(h().decode(e.data)),i=[];encodeLength(i,t.length);let s=[];return encodeLength(s,n.length),{programIdIndex:r,keyIndicesCount:a.Buffer.from(i),keyIndices:t,dataLength:a.Buffer.from(s),data:n}}),n=[];encodeLength(n,r.length);let i=a.Buffer.alloc(v);a.Buffer.from(n).copy(i);let s=n.length;r.forEach(e=>{let t=y.n_([y.u8("programIdIndex"),y.Ik(e.keyIndicesCount.length,"keyIndicesCount"),y.A9(y.u8("keyIndex"),e.keyIndices.length,"keyIndices"),y.Ik(e.dataLength.length,"dataLength"),y.A9(y.u8("userdatum"),e.data.length,"data")]),r=t.encode(e,i,s);s+=r}),i=i.slice(0,s);let o=y.n_([y.Ik(1,"numRequiredSignatures"),y.Ik(1,"numReadonlySignedAccounts"),y.Ik(1,"numReadonlyUnsignedAccounts"),y.Ik(t.length,"keyCount"),y.A9(publicKey("key"),e,"keys"),publicKey("recentBlockhash")]),c={numRequiredSignatures:a.Buffer.from([this.header.numRequiredSignatures]),numReadonlySignedAccounts:a.Buffer.from([this.header.numReadonlySignedAccounts]),numReadonlyUnsignedAccounts:a.Buffer.from([this.header.numReadonlyUnsignedAccounts]),keyCount:a.Buffer.from(t),keys:this.accountKeys.map(e=>toBuffer(e.toBytes())),recentBlockhash:h().decode(this.recentBlockhash)},u=a.Buffer.alloc(2048),l=o.encode(c,u);return i.copy(u,l),u.slice(0,l+i.length)}static from(e){let t=[...e],r=guardedShift(t);if(r!==(r&B))throw Error("Versioned messages must be deserialized with VersionedMessage.deserialize()");let n=guardedShift(t),i=guardedShift(t),s=decodeLength(t),o=[];for(let e=0;e<s;e++){let e=guardedSplice(t,0,E);o.push(new PublicKey(a.Buffer.from(e)))}let c=guardedSplice(t,0,E),u=decodeLength(t),l=[];for(let e=0;e<u;e++){let e=guardedShift(t),r=decodeLength(t),n=guardedSplice(t,0,r),i=decodeLength(t),s=guardedSplice(t,0,i),o=h().encode(a.Buffer.from(s));l.push({programIdIndex:e,accounts:n,data:o})}let d={header:{numRequiredSignatures:r,numReadonlySignedAccounts:n,numReadonlyUnsignedAccounts:i},recentBlockhash:h().encode(a.Buffer.from(c)),accountKeys:o,instructions:l};return new Message(d)}};let MessageV0=class MessageV0{constructor(e){this.header=void 0,this.staticAccountKeys=void 0,this.recentBlockhash=void 0,this.compiledInstructions=void 0,this.addressTableLookups=void 0,this.header=e.header,this.staticAccountKeys=e.staticAccountKeys,this.recentBlockhash=e.recentBlockhash,this.compiledInstructions=e.compiledInstructions,this.addressTableLookups=e.addressTableLookups}get version(){return 0}get numAccountKeysFromLookups(){let e=0;for(let t of this.addressTableLookups)e+=t.readonlyIndexes.length+t.writableIndexes.length;return e}getAccountKeys(e){let t;if(e&&"accountKeysFromLookups"in e&&e.accountKeysFromLookups){if(this.numAccountKeysFromLookups!=e.accountKeysFromLookups.writable.length+e.accountKeysFromLookups.readonly.length)throw Error("Failed to get account keys because of a mismatch in the number of account keys from lookups");t=e.accountKeysFromLookups}else if(e&&"addressLookupTableAccounts"in e&&e.addressLookupTableAccounts)t=this.resolveAddressTableLookups(e.addressLookupTableAccounts);else if(this.addressTableLookups.length>0)throw Error("Failed to get account keys because address table lookups were not resolved");return new MessageAccountKeys(this.staticAccountKeys,t)}isAccountSigner(e){return e<this.header.numRequiredSignatures}isAccountWritable(e){let t=this.header.numRequiredSignatures,r=this.staticAccountKeys.length;if(e>=r){let t=this.addressTableLookups.reduce((e,t)=>e+t.writableIndexes.length,0);return e-r<t}if(e>=this.header.numRequiredSignatures){let n=r-t-this.header.numReadonlyUnsignedAccounts;return e-t<n}{let r=t-this.header.numReadonlySignedAccounts;return e<r}}resolveAddressTableLookups(e){let t={writable:[],readonly:[]};for(let r of this.addressTableLookups){let n=e.find(e=>e.key.equals(r.accountKey));if(!n)throw Error(`Failed to find address lookup table account for table key ${r.accountKey.toBase58()}`);for(let e of r.writableIndexes)if(e<n.state.addresses.length)t.writable.push(n.state.addresses[e]);else throw Error(`Failed to find address for index ${e} in address lookup table ${r.accountKey.toBase58()}`);for(let e of r.readonlyIndexes)if(e<n.state.addresses.length)t.readonly.push(n.state.addresses[e]);else throw Error(`Failed to find address for index ${e} in address lookup table ${r.accountKey.toBase58()}`)}return t}static compile(e){let t=CompiledKeys.compile(e.instructions,e.payerKey),r=[],n={writable:[],readonly:[]},i=e.addressLookupTableAccounts||[];for(let e of i){let i=t.extractTableLookup(e);if(void 0!==i){let[e,{writable:t,readonly:s}]=i;r.push(e),n.writable.push(...t),n.readonly.push(...s)}}let[s,o]=t.getMessageComponents(),a=new MessageAccountKeys(o,n),c=a.compileInstructions(e.instructions);return new MessageV0({header:s,staticAccountKeys:o,recentBlockhash:e.recentBlockhash,compiledInstructions:c,addressTableLookups:r})}serialize(){let e=[];encodeLength(e,this.staticAccountKeys.length);let t=this.serializeInstructions(),r=[];encodeLength(r,this.compiledInstructions.length);let n=this.serializeAddressTableLookups(),i=[];encodeLength(i,this.addressTableLookups.length);let s=y.n_([y.u8("prefix"),y.n_([y.u8("numRequiredSignatures"),y.u8("numReadonlySignedAccounts"),y.u8("numReadonlyUnsignedAccounts")],"header"),y.Ik(e.length,"staticAccountKeysLength"),y.A9(publicKey(),this.staticAccountKeys.length,"staticAccountKeys"),publicKey("recentBlockhash"),y.Ik(r.length,"instructionsLength"),y.Ik(t.length,"serializedInstructions"),y.Ik(i.length,"addressTableLookupsLength"),y.Ik(n.length,"serializedAddressTableLookups")]),o=new Uint8Array(v),a=s.encode({prefix:128,header:this.header,staticAccountKeysLength:new Uint8Array(e),staticAccountKeys:this.staticAccountKeys.map(e=>e.toBytes()),recentBlockhash:h().decode(this.recentBlockhash),instructionsLength:new Uint8Array(r),serializedInstructions:t,addressTableLookupsLength:new Uint8Array(i),serializedAddressTableLookups:n},o);return o.slice(0,a)}serializeInstructions(){let e=0,t=new Uint8Array(v);for(let r of this.compiledInstructions){let n=[];encodeLength(n,r.accountKeyIndexes.length);let i=[];encodeLength(i,r.data.length);let s=y.n_([y.u8("programIdIndex"),y.Ik(n.length,"encodedAccountKeyIndexesLength"),y.A9(y.u8(),r.accountKeyIndexes.length,"accountKeyIndexes"),y.Ik(i.length,"encodedDataLength"),y.Ik(r.data.length,"data")]);e+=s.encode({programIdIndex:r.programIdIndex,encodedAccountKeyIndexesLength:new Uint8Array(n),accountKeyIndexes:r.accountKeyIndexes,encodedDataLength:new Uint8Array(i),data:r.data},t,e)}return t.slice(0,e)}serializeAddressTableLookups(){let e=0,t=new Uint8Array(v);for(let r of this.addressTableLookups){let n=[];encodeLength(n,r.writableIndexes.length);let i=[];encodeLength(i,r.readonlyIndexes.length);let s=y.n_([publicKey("accountKey"),y.Ik(n.length,"encodedWritableIndexesLength"),y.A9(y.u8(),r.writableIndexes.length,"writableIndexes"),y.Ik(i.length,"encodedReadonlyIndexesLength"),y.A9(y.u8(),r.readonlyIndexes.length,"readonlyIndexes")]);e+=s.encode({accountKey:r.accountKey.toBytes(),encodedWritableIndexesLength:new Uint8Array(n),writableIndexes:r.writableIndexes,encodedReadonlyIndexesLength:new Uint8Array(i),readonlyIndexes:r.readonlyIndexes},t,e)}return t.slice(0,e)}static deserialize(e){let t=[...e],r=guardedShift(t),n=r&B;assert(r!==n,"Expected versioned message but received legacy message"),assert(0===n,`Expected versioned message with version 0 but found version ${n}`);let i={numRequiredSignatures:guardedShift(t),numReadonlySignedAccounts:guardedShift(t),numReadonlyUnsignedAccounts:guardedShift(t)},s=[],o=decodeLength(t);for(let e=0;e<o;e++)s.push(new PublicKey(guardedSplice(t,0,E)));let a=h().encode(guardedSplice(t,0,E)),c=decodeLength(t),u=[];for(let e=0;e<c;e++){let e=guardedShift(t),r=decodeLength(t),n=guardedSplice(t,0,r),i=decodeLength(t),s=new Uint8Array(guardedSplice(t,0,i));u.push({programIdIndex:e,accountKeyIndexes:n,data:s})}let l=decodeLength(t),d=[];for(let e=0;e<l;e++){let e=new PublicKey(guardedSplice(t,0,E)),r=decodeLength(t),n=guardedSplice(t,0,r),i=decodeLength(t),s=guardedSplice(t,0,i);d.push({accountKey:e,writableIndexes:n,readonlyIndexes:s})}return new MessageV0({header:i,staticAccountKeys:s,recentBlockhash:a,compiledInstructions:u,addressTableLookups:d})}};let L={deserializeMessageVersion(e){let t=e[0],r=t&B;return r===t?"legacy":r},deserialize:e=>{let t=L.deserializeMessageVersion(e);if("legacy"===t)return Message.from(e);if(0===t)return MessageV0.deserialize(e);throw Error(`Transaction message version ${t} deserialization is not supported`)}},N=((i={})[i.BLOCKHEIGHT_EXCEEDED=0]="BLOCKHEIGHT_EXCEEDED",i[i.PROCESSED=1]="PROCESSED",i[i.TIMED_OUT=2]="TIMED_OUT",i[i.NONCE_INVALID=3]="NONCE_INVALID",i),W=a.Buffer.alloc(K).fill(0);let TransactionInstruction=class TransactionInstruction{constructor(e){this.keys=void 0,this.programId=void 0,this.data=a.Buffer.alloc(0),this.programId=e.programId,this.keys=e.keys,e.data&&(this.data=e.data)}toJSON(){return{keys:this.keys.map(({pubkey:e,isSigner:t,isWritable:r})=>({pubkey:e.toJSON(),isSigner:t,isWritable:r})),programId:this.programId.toJSON(),data:[...this.data]}}};let Transaction=class Transaction{get signature(){return this.signatures.length>0?this.signatures[0].signature:null}constructor(e){if(this.signatures=[],this.feePayer=void 0,this.instructions=[],this.recentBlockhash=void 0,this.lastValidBlockHeight=void 0,this.nonceInfo=void 0,this.minNonceContextSlot=void 0,this._message=void 0,this._json=void 0,!e)return;if(e.feePayer&&(this.feePayer=e.feePayer),e.signatures&&(this.signatures=e.signatures),Object.prototype.hasOwnProperty.call(e,"nonceInfo")){let{minContextSlot:t,nonceInfo:r}=e;this.minNonceContextSlot=t,this.nonceInfo=r}else if(Object.prototype.hasOwnProperty.call(e,"lastValidBlockHeight")){let{blockhash:t,lastValidBlockHeight:r}=e;this.recentBlockhash=t,this.lastValidBlockHeight=r}else{let{recentBlockhash:t,nonceInfo:r}=e;r&&(this.nonceInfo=r),this.recentBlockhash=t}}toJSON(){return{recentBlockhash:this.recentBlockhash||null,feePayer:this.feePayer?this.feePayer.toJSON():null,nonceInfo:this.nonceInfo?{nonce:this.nonceInfo.nonce,nonceInstruction:this.nonceInfo.nonceInstruction.toJSON()}:null,instructions:this.instructions.map(e=>e.toJSON()),signers:this.signatures.map(({publicKey:e})=>e.toJSON())}}add(...e){if(0===e.length)throw Error("No instructions");return e.forEach(e=>{"instructions"in e?this.instructions=this.instructions.concat(e.instructions):"data"in e&&"programId"in e&&"keys"in e?this.instructions.push(e):this.instructions.push(new TransactionInstruction(e))}),this}compileMessage(){let e,t,r;if(this._message&&JSON.stringify(this.toJSON())===JSON.stringify(this._json))return this._message;if(this.nonceInfo?(e=this.nonceInfo.nonce,t=this.instructions[0]!=this.nonceInfo.nonceInstruction?[this.nonceInfo.nonceInstruction,...this.instructions]:this.instructions):(e=this.recentBlockhash,t=this.instructions),!e)throw Error("Transaction recentBlockhash required");if(t.length<1&&console.warn("No instructions provided"),this.feePayer)r=this.feePayer;else if(this.signatures.length>0&&this.signatures[0].publicKey)r=this.signatures[0].publicKey;else throw Error("Transaction fee payer required");for(let e=0;e<t.length;e++)if(void 0===t[e].programId)throw Error(`Transaction instruction index ${e} has undefined program id`);let n=[],i=[];t.forEach(e=>{e.keys.forEach(e=>{i.push({...e})});let t=e.programId.toString();n.includes(t)||n.push(t)}),n.forEach(e=>{i.push({pubkey:new PublicKey(e),isSigner:!1,isWritable:!1})});let s=[];i.forEach(e=>{let t=e.pubkey.toString(),r=s.findIndex(e=>e.pubkey.toString()===t);r>-1?(s[r].isWritable=s[r].isWritable||e.isWritable,s[r].isSigner=s[r].isSigner||e.isSigner):s.push(e)}),s.sort(function(e,t){return e.isSigner!==t.isSigner?e.isSigner?-1:1:e.isWritable!==t.isWritable?e.isWritable?-1:1:e.pubkey.toBase58().localeCompare(t.pubkey.toBase58(),"en",{localeMatcher:"best fit",usage:"sort",sensitivity:"variant",ignorePunctuation:!1,numeric:!1,caseFirst:"lower"})});let o=s.findIndex(e=>e.pubkey.equals(r));if(o>-1){let[e]=s.splice(o,1);e.isSigner=!0,e.isWritable=!0,s.unshift(e)}else s.unshift({pubkey:r,isSigner:!0,isWritable:!0});for(let e of this.signatures){let t=s.findIndex(t=>t.pubkey.equals(e.publicKey));if(t>-1)s[t].isSigner||(s[t].isSigner=!0,console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release."));else throw Error(`unknown signer: ${e.publicKey.toString()}`)}let a=0,c=0,u=0,l=[],d=[];s.forEach(({pubkey:e,isSigner:t,isWritable:r})=>{t?(l.push(e.toString()),a+=1,r||(c+=1)):(d.push(e.toString()),r||(u+=1))});let g=l.concat(d),p=t.map(e=>{let{data:t,programId:r}=e;return{programIdIndex:g.indexOf(r.toString()),accounts:e.keys.map(e=>g.indexOf(e.pubkey.toString())),data:h().encode(t)}});return p.forEach(e=>{assert(e.programIdIndex>=0),e.accounts.forEach(e=>assert(e>=0))}),new Message({header:{numRequiredSignatures:a,numReadonlySignedAccounts:c,numReadonlyUnsignedAccounts:u},accountKeys:g,recentBlockhash:e,instructions:p})}_compile(){let e=this.compileMessage(),t=e.accountKeys.slice(0,e.header.numRequiredSignatures);if(this.signatures.length===t.length){let r=this.signatures.every((e,r)=>t[r].equals(e.publicKey));if(r)return e}return this.signatures=t.map(e=>({signature:null,publicKey:e})),e}serializeMessage(){return this._compile().serialize()}async getEstimatedFee(e){return(await e.getFeeForMessage(this.compileMessage())).value}setSigners(...e){if(0===e.length)throw Error("No signers");let t=new Set;this.signatures=e.filter(e=>{let r=e.toString();return!t.has(r)&&(t.add(r),!0)}).map(e=>({signature:null,publicKey:e}))}sign(...e){if(0===e.length)throw Error("No signers");let t=new Set,r=[];for(let n of e){let e=n.publicKey.toString();t.has(e)||(t.add(e),r.push(n))}this.signatures=r.map(e=>({signature:null,publicKey:e.publicKey}));let n=this._compile();this._partialSign(n,...r)}partialSign(...e){if(0===e.length)throw Error("No signers");let t=new Set,r=[];for(let n of e){let e=n.publicKey.toString();t.has(e)||(t.add(e),r.push(n))}let n=this._compile();this._partialSign(n,...r)}_partialSign(e,...t){let r=e.serialize();t.forEach(e=>{let t=sign(r,e.secretKey);this._addSignature(e.publicKey,toBuffer(t))})}addSignature(e,t){this._compile(),this._addSignature(e,t)}_addSignature(e,t){assert(64===t.length);let r=this.signatures.findIndex(t=>e.equals(t.publicKey));if(r<0)throw Error(`unknown signer: ${e.toString()}`);this.signatures[r].signature=a.Buffer.from(t)}verifySignatures(e=!0){let t=this._getMessageSignednessErrors(this.serializeMessage(),e);return!t}_getMessageSignednessErrors(e,t){let r={};for(let{signature:n,publicKey:i}of this.signatures)null===n?t&&(r.missing||=[]).push(i):A(n,e,i.toBytes())||(r.invalid||=[]).push(i);return r.invalid||r.missing?r:void 0}serialize(e){let{requireAllSignatures:t,verifySignatures:r}=Object.assign({requireAllSignatures:!0,verifySignatures:!0},e),n=this.serializeMessage();if(r){let e=this._getMessageSignednessErrors(n,t);if(e){let t="Signature verification failed.";throw e.invalid&&(t+=`
Invalid signature for public key${1===e.invalid.length?"":"(s)"} [\`${e.invalid.map(e=>e.toBase58()).join("`, `")}\`].`),e.missing&&(t+=`
Missing signature for public key${1===e.missing.length?"":"(s)"} [\`${e.missing.map(e=>e.toBase58()).join("`, `")}\`].`),Error(t)}}return this._serialize(n)}_serialize(e){let{signatures:t}=this,r=[];encodeLength(r,t.length);let n=r.length+64*t.length+e.length,i=a.Buffer.alloc(n);return assert(t.length<256),a.Buffer.from(r).copy(i,0),t.forEach(({signature:e},t)=>{null!==e&&(assert(64===e.length,"signature has invalid length"),a.Buffer.from(e).copy(i,r.length+64*t))}),e.copy(i,r.length+64*t.length),assert(i.length<=v,`Transaction too large: ${i.length} > ${v}`),i}get keys(){return assert(1===this.instructions.length),this.instructions[0].keys.map(e=>e.pubkey)}get programId(){return assert(1===this.instructions.length),this.instructions[0].programId}get data(){return assert(1===this.instructions.length),this.instructions[0].data}static from(e){let t=[...e],r=decodeLength(t),n=[];for(let e=0;e<r;e++){let e=guardedSplice(t,0,K);n.push(h().encode(a.Buffer.from(e)))}return Transaction.populate(Message.from(t),n)}static populate(e,t=[]){let r=new Transaction;return r.recentBlockhash=e.recentBlockhash,e.header.numRequiredSignatures>0&&(r.feePayer=e.accountKeys[0]),t.forEach((t,n)=>{let i={signature:t==h().encode(W)?null:h().decode(t),publicKey:e.accountKeys[n]};r.signatures.push(i)}),e.instructions.forEach(t=>{let n=t.accounts.map(t=>{let n=e.accountKeys[t];return{pubkey:n,isSigner:r.signatures.some(e=>e.publicKey.toString()===n.toString())||e.isAccountSigner(t),isWritable:e.isAccountWritable(t)}});r.instructions.push(new TransactionInstruction({keys:n,programId:e.accountKeys[t.programIdIndex],data:h().decode(t.data)}))}),r._message=e,r._json=r.toJSON(),r}};let TransactionMessage=class TransactionMessage{constructor(e){this.payerKey=void 0,this.instructions=void 0,this.recentBlockhash=void 0,this.payerKey=e.payerKey,this.instructions=e.instructions,this.recentBlockhash=e.recentBlockhash}static decompile(e,t){let{header:r,compiledInstructions:n,recentBlockhash:i}=e,{numRequiredSignatures:s,numReadonlySignedAccounts:o,numReadonlyUnsignedAccounts:a}=r,c=s-o;assert(c>0,"Message header is invalid");let u=e.staticAccountKeys.length-s-a;assert(u>=0,"Message header is invalid");let l=e.getAccountKeys(t),d=l.get(0);if(void 0===d)throw Error("Failed to decompile message because no account keys were found");let h=[];for(let e of n){let t=[];for(let n of e.accountKeyIndexes){let e;let i=l.get(n);if(void 0===i)throw Error(`Failed to find key for account key index ${n}`);let o=n<s;e=o?n<c:n<l.staticAccountKeys.length?n-s<u:n-l.staticAccountKeys.length<l.accountKeysFromLookups.writable.length,t.push({pubkey:i,isSigner:n<r.numRequiredSignatures,isWritable:e})}let n=l.get(e.programIdIndex);if(void 0===n)throw Error(`Failed to find program id for program id index ${e.programIdIndex}`);h.push(new TransactionInstruction({programId:n,data:toBuffer(e.data),keys:t}))}return new TransactionMessage({payerKey:d,instructions:h,recentBlockhash:i})}compileToLegacyMessage(){return Message.compile({payerKey:this.payerKey,recentBlockhash:this.recentBlockhash,instructions:this.instructions})}compileToV0Message(e){return MessageV0.compile({payerKey:this.payerKey,recentBlockhash:this.recentBlockhash,instructions:this.instructions,addressLookupTableAccounts:e})}};let VersionedTransaction=class VersionedTransaction{get version(){return this.message.version}constructor(e,t){if(this.signatures=void 0,this.message=void 0,void 0!==t)assert(t.length===e.header.numRequiredSignatures,"Expected signatures length to be equal to the number of required signatures"),this.signatures=t;else{let t=[];for(let r=0;r<e.header.numRequiredSignatures;r++)t.push(new Uint8Array(K));this.signatures=t}this.message=e}serialize(){let e=this.message.serialize(),t=[];encodeLength(t,this.signatures.length);let r=y.n_([y.Ik(t.length,"encodedSignaturesLength"),y.A9(signature(),this.signatures.length,"signatures"),y.Ik(e.length,"serializedMessage")]),n=new Uint8Array(2048),i=r.encode({encodedSignaturesLength:new Uint8Array(t),signatures:this.signatures,serializedMessage:e},n);return n.slice(0,i)}static deserialize(e){let t=[...e],r=[],n=decodeLength(t);for(let e=0;e<n;e++)r.push(new Uint8Array(guardedSplice(t,0,K)));let i=L.deserialize(new Uint8Array(t));return new VersionedTransaction(i,r)}sign(e){let t=this.message.serialize(),r=this.message.staticAccountKeys.slice(0,this.message.header.numRequiredSignatures);for(let n of e){let e=r.findIndex(e=>e.equals(n.publicKey));assert(e>=0,`Cannot sign with non signer key ${n.publicKey.toBase58()}`),this.signatures[e]=sign(t,n.secretKey)}}addSignature(e,t){assert(64===t.byteLength,"Signature must be 64 bytes long");let r=this.message.staticAccountKeys.slice(0,this.message.header.numRequiredSignatures),n=r.findIndex(t=>t.equals(e));assert(n>=0,`Can not add signature; \`${e.toBase58()}\` is not required to sign this transaction`),this.signatures[n]=t}};let z=new PublicKey("SysvarC1ock11111111111111111111111111111111"),U=new PublicKey("SysvarEpochSchedu1e111111111111111111111111"),q=new PublicKey("Sysvar1nstructions1111111111111111111111111"),j=new PublicKey("SysvarRecentB1ockHashes11111111111111111111"),D=new PublicKey("SysvarRent111111111111111111111111111111111"),J=new PublicKey("SysvarRewards111111111111111111111111111111"),M=new PublicKey("SysvarS1otHashes111111111111111111111111111"),V=new PublicKey("SysvarS1otHistory11111111111111111111111111"),$=new PublicKey("SysvarStakeHistory1111111111111111111111111");let SendTransactionError=class SendTransactionError extends Error{constructor({action:e,signature:t,transactionMessage:r,logs:n}){let i;let s=n?`Logs: 
${JSON.stringify(n.slice(-10),null,2)}. `:"",o="\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.";switch(e){case"send":i=`Transaction ${t} resulted in an error. 
${r}. `+s+o;break;case"simulate":i=`Simulation failed. 
Message: ${r}. 
`+s+o;break;default:i=`Unknown action '${e}'`}super(i),this.signature=void 0,this.transactionMessage=void 0,this.transactionLogs=void 0,this.signature=t,this.transactionMessage=r,this.transactionLogs=n||void 0}get transactionError(){return{message:this.transactionMessage,logs:Array.isArray(this.transactionLogs)?this.transactionLogs:void 0}}get logs(){let e=this.transactionLogs;if(null==e||"object"!=typeof e||!("then"in e))return e}async getLogs(e){return Array.isArray(this.transactionLogs)||(this.transactionLogs=new Promise((t,r)=>{e.getTransaction(this.signature).then(e=>{if(e&&e.meta&&e.meta.logMessages){let r=e.meta.logMessages;this.transactionLogs=r,t(r)}else r(Error("Log messages not found"))}).catch(r)})),await this.transactionLogs}};let F={JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP:-32001,JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE:-32002,JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE:-32003,JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE:-32004,JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY:-32005,JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE:-32006,JSON_RPC_SERVER_ERROR_SLOT_SKIPPED:-32007,JSON_RPC_SERVER_ERROR_NO_SNAPSHOT:-32008,JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED:-32009,JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX:-32010,JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE:-32011,JSON_RPC_SCAN_ERROR:-32012,JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH:-32013,JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET:-32014,JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION:-32015,JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED:-32016};let SolanaJSONRPCError=class SolanaJSONRPCError extends Error{constructor({code:e,message:t,data:r},n){super(null!=n?`${n}: ${t}`:t),this.code=void 0,this.data=void 0,this.code=e,this.data=r,this.name="SolanaJSONRPCError"}};async function sendAndConfirmTransaction(e,t,r,n){let i;let s=n&&{skipPreflight:n.skipPreflight,preflightCommitment:n.preflightCommitment||n.commitment,maxRetries:n.maxRetries,minContextSlot:n.minContextSlot},o=await e.sendTransaction(t,r,s);if(null!=t.recentBlockhash&&null!=t.lastValidBlockHeight)i=(await e.confirmTransaction({abortSignal:n?.abortSignal,signature:o,blockhash:t.recentBlockhash,lastValidBlockHeight:t.lastValidBlockHeight},n&&n.commitment)).value;else if(null!=t.minNonceContextSlot&&null!=t.nonceInfo){let{nonceInstruction:r}=t.nonceInfo,s=r.keys[0].pubkey;i=(await e.confirmTransaction({abortSignal:n?.abortSignal,minContextSlot:t.minNonceContextSlot,nonceAccountPubkey:s,nonceValue:t.nonceInfo.nonce,signature:o},n&&n.commitment)).value}else n?.abortSignal!=null&&console.warn("sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` or a combination of `nonceInfo` and `minNonceContextSlot` are abortable."),i=(await e.confirmTransaction(o,n&&n.commitment)).value;if(i.err){if(null!=o)throw new SendTransactionError({action:"send",signature:o,transactionMessage:`Status: (${JSON.stringify(i)})`});throw Error(`Transaction ${o} failed (${JSON.stringify(i)})`)}return o}function sleep(e){return new Promise(t=>setTimeout(t,e))}function encodeData(e,t){let r=e.layout.span>=0?e.layout.span:getAlloc(e,t),n=a.Buffer.alloc(r),i=Object.assign({instruction:e.index},t);return e.layout.encode(i,n),n}function decodeData$1(e,t){let r;try{r=e.layout.decode(t)}catch(e){throw Error("invalid instruction; "+e)}if(r.instruction!==e.index)throw Error(`invalid instruction; instruction index mismatch ${r.instruction} != ${e.index}`);return r}let G=y._O("lamportsPerSignature"),H=y.n_([y.Jq("version"),y.Jq("state"),publicKey("authorizedPubkey"),publicKey("nonce"),y.n_([G],"feeCalculator")]),Z=H.span;let NonceAccount=class NonceAccount{constructor(e){this.authorizedPubkey=void 0,this.nonce=void 0,this.feeCalculator=void 0,this.authorizedPubkey=e.authorizedPubkey,this.nonce=e.nonce,this.feeCalculator=e.feeCalculator}static fromAccountData(e){let t=H.decode(toBuffer(e),0);return new NonceAccount({authorizedPubkey:new PublicKey(t.authorizedPubkey),nonce:new PublicKey(t.nonce).toString(),feeCalculator:t.feeCalculator})}};function u64(e){let t=(0,y.Ik)(8,e),r=t.decode.bind(t),n=t.encode.bind(t),i=(0,m.GH)();return t.decode=(e,t)=>{let n=r(e,t);return i.decode(n)},t.encode=(e,t,r)=>{let s=i.encode(e);return n(s,t,r)},t}let SystemInstruction=class SystemInstruction{constructor(){}static decodeInstructionType(e){let t;this.checkProgramId(e.programId);let r=y.Jq("instruction"),n=r.decode(e.data);for(let[e,r]of Object.entries(X))if(r.index==n){t=e;break}if(!t)throw Error("Instruction type incorrect; not a SystemInstruction");return t}static decodeCreateAccount(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);let{lamports:t,space:r,programId:n}=decodeData$1(X.Create,e.data);return{fromPubkey:e.keys[0].pubkey,newAccountPubkey:e.keys[1].pubkey,lamports:t,space:r,programId:new PublicKey(n)}}static decodeTransfer(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);let{lamports:t}=decodeData$1(X.Transfer,e.data);return{fromPubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,lamports:t}}static decodeTransferWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);let{lamports:t,seed:r,programId:n}=decodeData$1(X.TransferWithSeed,e.data);return{fromPubkey:e.keys[0].pubkey,basePubkey:e.keys[1].pubkey,toPubkey:e.keys[2].pubkey,lamports:t,seed:r,programId:new PublicKey(n)}}static decodeAllocate(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);let{space:t}=decodeData$1(X.Allocate,e.data);return{accountPubkey:e.keys[0].pubkey,space:t}}static decodeAllocateWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);let{base:t,seed:r,space:n,programId:i}=decodeData$1(X.AllocateWithSeed,e.data);return{accountPubkey:e.keys[0].pubkey,basePubkey:new PublicKey(t),seed:r,space:n,programId:new PublicKey(i)}}static decodeAssign(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);let{programId:t}=decodeData$1(X.Assign,e.data);return{accountPubkey:e.keys[0].pubkey,programId:new PublicKey(t)}}static decodeAssignWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);let{base:t,seed:r,programId:n}=decodeData$1(X.AssignWithSeed,e.data);return{accountPubkey:e.keys[0].pubkey,basePubkey:new PublicKey(t),seed:r,programId:new PublicKey(n)}}static decodeCreateWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);let{base:t,seed:r,lamports:n,space:i,programId:s}=decodeData$1(X.CreateWithSeed,e.data);return{fromPubkey:e.keys[0].pubkey,newAccountPubkey:e.keys[1].pubkey,basePubkey:new PublicKey(t),seed:r,lamports:n,space:i,programId:new PublicKey(s)}}static decodeNonceInitialize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);let{authorized:t}=decodeData$1(X.InitializeNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,authorizedPubkey:new PublicKey(t)}}static decodeNonceAdvance(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),decodeData$1(X.AdvanceNonceAccount,e.data),{noncePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey}}static decodeNonceWithdraw(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,5);let{lamports:t}=decodeData$1(X.WithdrawNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey,lamports:t}}static decodeNonceAuthorize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);let{authorized:t}=decodeData$1(X.AuthorizeNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[1].pubkey,newAuthorizedPubkey:new PublicKey(t)}}static checkProgramId(e){if(!e.equals(SystemProgram.programId))throw Error("invalid instruction; programId is not SystemProgram")}static checkKeyLength(e,t){if(e.length<t)throw Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}};let X=Object.freeze({Create:{index:0,layout:y.n_([y.Jq("instruction"),y.gM("lamports"),y.gM("space"),publicKey("programId")])},Assign:{index:1,layout:y.n_([y.Jq("instruction"),publicKey("programId")])},Transfer:{index:2,layout:y.n_([y.Jq("instruction"),u64("lamports")])},CreateWithSeed:{index:3,layout:y.n_([y.Jq("instruction"),publicKey("base"),rustString("seed"),y.gM("lamports"),y.gM("space"),publicKey("programId")])},AdvanceNonceAccount:{index:4,layout:y.n_([y.Jq("instruction")])},WithdrawNonceAccount:{index:5,layout:y.n_([y.Jq("instruction"),y.gM("lamports")])},InitializeNonceAccount:{index:6,layout:y.n_([y.Jq("instruction"),publicKey("authorized")])},AuthorizeNonceAccount:{index:7,layout:y.n_([y.Jq("instruction"),publicKey("authorized")])},Allocate:{index:8,layout:y.n_([y.Jq("instruction"),y.gM("space")])},AllocateWithSeed:{index:9,layout:y.n_([y.Jq("instruction"),publicKey("base"),rustString("seed"),y.gM("space"),publicKey("programId")])},AssignWithSeed:{index:10,layout:y.n_([y.Jq("instruction"),publicKey("base"),rustString("seed"),publicKey("programId")])},TransferWithSeed:{index:11,layout:y.n_([y.Jq("instruction"),u64("lamports"),rustString("seed"),publicKey("programId")])},UpgradeNonceAccount:{index:12,layout:y.n_([y.Jq("instruction")])}});let SystemProgram=class SystemProgram{constructor(){}static createAccount(e){let t=X.Create,r=encodeData(t,{lamports:e.lamports,space:e.space,programId:toBuffer(e.programId.toBuffer())});return new TransactionInstruction({keys:[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.newAccountPubkey,isSigner:!0,isWritable:!0}],programId:this.programId,data:r})}static transfer(e){let t,r;if("basePubkey"in e){let n=X.TransferWithSeed;t=encodeData(n,{lamports:BigInt(e.lamports),seed:e.seed,programId:toBuffer(e.programId.toBuffer())}),r=[{pubkey:e.fromPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0}]}else{let n=X.Transfer;t=encodeData(n,{lamports:BigInt(e.lamports)}),r=[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}static assign(e){let t,r;if("basePubkey"in e){let n=X.AssignWithSeed;t=encodeData(n,{base:toBuffer(e.basePubkey.toBuffer()),seed:e.seed,programId:toBuffer(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1}]}else{let n=X.Assign;t=encodeData(n,{programId:toBuffer(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!0,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}static createAccountWithSeed(e){let t=X.CreateWithSeed,r=encodeData(t,{base:toBuffer(e.basePubkey.toBuffer()),seed:e.seed,lamports:e.lamports,space:e.space,programId:toBuffer(e.programId.toBuffer())}),n=[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.newAccountPubkey,isSigner:!1,isWritable:!0}];return e.basePubkey.equals(e.fromPubkey)||n.push({pubkey:e.basePubkey,isSigner:!0,isWritable:!1}),new TransactionInstruction({keys:n,programId:this.programId,data:r})}static createNonceAccount(e){let t=new Transaction;"basePubkey"in e&&"seed"in e?t.add(SystemProgram.createAccountWithSeed({fromPubkey:e.fromPubkey,newAccountPubkey:e.noncePubkey,basePubkey:e.basePubkey,seed:e.seed,lamports:e.lamports,space:Z,programId:this.programId})):t.add(SystemProgram.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.noncePubkey,lamports:e.lamports,space:Z,programId:this.programId}));let r={noncePubkey:e.noncePubkey,authorizedPubkey:e.authorizedPubkey};return t.add(this.nonceInitialize(r)),t}static nonceInitialize(e){let t=X.InitializeNonceAccount,r=encodeData(t,{authorized:toBuffer(e.authorizedPubkey.toBuffer())}),n={keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:j,isSigner:!1,isWritable:!1},{pubkey:D,isSigner:!1,isWritable:!1}],programId:this.programId,data:r};return new TransactionInstruction(n)}static nonceAdvance(e){let t=X.AdvanceNonceAccount,r=encodeData(t),n={keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:j,isSigner:!1,isWritable:!1},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:r};return new TransactionInstruction(n)}static nonceWithdraw(e){let t=X.WithdrawNonceAccount,r=encodeData(t,{lamports:e.lamports});return new TransactionInstruction({keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0},{pubkey:j,isSigner:!1,isWritable:!1},{pubkey:D,isSigner:!1,isWritable:!1},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:r})}static nonceAuthorize(e){let t=X.AuthorizeNonceAccount,r=encodeData(t,{authorized:toBuffer(e.newAuthorizedPubkey.toBuffer())});return new TransactionInstruction({keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:r})}static allocate(e){let t,r;if("basePubkey"in e){let n=X.AllocateWithSeed;t=encodeData(n,{base:toBuffer(e.basePubkey.toBuffer()),seed:e.seed,space:e.space,programId:toBuffer(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1}]}else{let n=X.Allocate;t=encodeData(n,{space:e.space}),r=[{pubkey:e.accountPubkey,isSigner:!0,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}};SystemProgram.programId=new PublicKey("11111111111111111111111111111111");let Y=v-300;let Loader=class Loader{constructor(){}static getMinNumSignatures(e){return 2*(Math.ceil(e/Loader.chunkSize)+1+1)}static async load(e,t,r,n,i){{let s=await e.getMinimumBalanceForRentExemption(i.length),o=await e.getAccountInfo(r.publicKey,"confirmed"),a=null;if(null!==o){if(o.executable)return console.error("Program load failed, account is already executable"),!1;o.data.length!==i.length&&(a=a||new Transaction).add(SystemProgram.allocate({accountPubkey:r.publicKey,space:i.length})),o.owner.equals(n)||(a=a||new Transaction).add(SystemProgram.assign({accountPubkey:r.publicKey,programId:n})),o.lamports<s&&(a=a||new Transaction).add(SystemProgram.transfer({fromPubkey:t.publicKey,toPubkey:r.publicKey,lamports:s-o.lamports}))}else a=new Transaction().add(SystemProgram.createAccount({fromPubkey:t.publicKey,newAccountPubkey:r.publicKey,lamports:s>0?s:1,space:i.length,programId:n}));null!==a&&await sendAndConfirmTransaction(e,a,[t,r],{commitment:"confirmed"})}let s=y.n_([y.Jq("instruction"),y.Jq("offset"),y.Jq("bytesLength"),y.Jq("bytesLengthPadding"),y.A9(y.u8("byte"),y.cv(y.Jq(),-8),"bytes")]),o=Loader.chunkSize,c=0,u=i,l=[];for(;u.length>0;){let i=u.slice(0,o),d=a.Buffer.alloc(o+16);s.encode({instruction:0,offset:c,bytes:i,bytesLength:0,bytesLengthPadding:0},d);let h=new Transaction().add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0}],programId:n,data:d});l.push(sendAndConfirmTransaction(e,h,[t,r],{commitment:"confirmed"})),e._rpcEndpoint.includes("solana.com")&&await sleep(250),c+=o,u=u.slice(o)}await Promise.all(l);{let i=y.n_([y.Jq("instruction")]),s=a.Buffer.alloc(i.span);i.encode({instruction:1},s);let o=new Transaction().add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0},{pubkey:D,isSigner:!1,isWritable:!1}],programId:n,data:s}),c="processed",u=await e.sendTransaction(o,[t,r],{preflightCommitment:c}),{context:l,value:d}=await e.confirmTransaction({signature:u,lastValidBlockHeight:o.lastValidBlockHeight,blockhash:o.recentBlockhash},c);if(d.err)throw Error(`Transaction ${u} failed (${JSON.stringify(d)})`);for(;;){try{let t=await e.getSlot({commitment:c});if(t>l.slot)break}catch{}await new Promise(e=>setTimeout(e,Math.round(200)))}}return!0}};Loader.chunkSize=Y;let Q=new PublicKey("BPFLoader2111111111111111111111111111111111");let BpfLoader=class BpfLoader{static getMinNumSignatures(e){return Loader.getMinNumSignatures(e)}static load(e,t,r,n,i){return Loader.load(e,t,r,i,n)}};var ee=(n=function(){if(o)return s;o=1;var e=Object.prototype.toString,t=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};function stringify(r,n){var i,s,o,a,c,u,l;if(!0===r)return"true";if(!1===r)return"false";switch(typeof r){case"object":if(null===r)return null;if(r.toJSON&&"function"==typeof r.toJSON)return stringify(r.toJSON(),n);if("[object Array]"===(l=e.call(r))){for(i=0,o="[",s=r.length-1;i<s;i++)o+=stringify(r[i],!0)+",";return s>-1&&(o+=stringify(r[i],!0)),o+"]"}if("[object Object]"!==l)return JSON.stringify(r);for(s=(a=t(r).sort()).length,o="",i=0;i<s;)void 0!==(u=stringify(r[c=a[i]],!1))&&(o&&(o+=","),o+=JSON.stringify(c)+":"+u),i++;return"{"+o+"}";case"function":case"undefined":return n?null:void 0;case"string":return JSON.stringify(r);default:return isFinite(r)?r:null}}return s=function(e){var t=stringify(e,!1);if(void 0!==t)return""+t}}())&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n;function trailingZeros(e){let t=0;for(;e>1;)e/=2,t++;return t}function nextPowerOfTwo(e){return 0===e?1:(e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,(e|=e>>32)+1)}let EpochSchedule=class EpochSchedule{constructor(e,t,r,n,i){this.slotsPerEpoch=void 0,this.leaderScheduleSlotOffset=void 0,this.warmup=void 0,this.firstNormalEpoch=void 0,this.firstNormalSlot=void 0,this.slotsPerEpoch=e,this.leaderScheduleSlotOffset=t,this.warmup=r,this.firstNormalEpoch=n,this.firstNormalSlot=i}getEpoch(e){return this.getEpochAndSlotIndex(e)[0]}getEpochAndSlotIndex(e){if(e<this.firstNormalSlot){let t=trailingZeros(nextPowerOfTwo(e+32+1))-trailingZeros(32)-1,r=this.getSlotsInEpoch(t),n=e-(r-32);return[t,n]}{let t=e-this.firstNormalSlot,r=Math.floor(t/this.slotsPerEpoch),n=this.firstNormalEpoch+r,i=t%this.slotsPerEpoch;return[n,i]}}getFirstSlotInEpoch(e){return e<=this.firstNormalEpoch?(Math.pow(2,e)-1)*32:(e-this.firstNormalEpoch)*this.slotsPerEpoch+this.firstNormalSlot}getLastSlotInEpoch(e){return this.getFirstSlotInEpoch(e)+this.getSlotsInEpoch(e)-1}getSlotsInEpoch(e){return e<this.firstNormalEpoch?Math.pow(2,e+trailingZeros(32)):this.slotsPerEpoch}};var et=globalThis.fetch;let RpcWebSocketClient=class RpcWebSocketClient extends S.Ey{constructor(e,t,r){super(e=>{let r=(0,S.XY)(e,{autoconnect:!0,max_reconnects:5,reconnect:!0,reconnect_interval:1e3,...t});return"socket"in r?this.underlyingSocket=r.socket:this.underlyingSocket=r,r},e,t,r),this.underlyingSocket=void 0}call(...e){let t=this.underlyingSocket?.readyState;return 1===t?super.call(...e):Promise.reject(Error("Tried to call a JSON-RPC method `"+e[0]+"` but the socket was not `CONNECTING` or `OPEN` (`readyState` was "+t+")"))}notify(...e){let t=this.underlyingSocket?.readyState;return 1===t?super.notify(...e):Promise.reject(Error("Tried to send a JSON-RPC notification `"+e[0]+"` but the socket was not `CONNECTING` or `OPEN` (`readyState` was "+t+")"))}};function decodeData(e,t){let r;try{r=e.layout.decode(t)}catch(e){throw Error("invalid instruction; "+e)}if(r.typeIndex!==e.index)throw Error(`invalid account data; account type mismatch ${r.typeIndex} != ${e.index}`);return r}let AddressLookupTableAccount=class AddressLookupTableAccount{constructor(e){this.key=void 0,this.state=void 0,this.key=e.key,this.state=e.state}isActive(){let e=BigInt("0xffffffffffffffff");return this.state.deactivationSlot===e}static deserialize(e){let t=decodeData(er,e),r=e.length-56;assert(r>=0,"lookup table is invalid"),assert(r%32==0,"lookup table is invalid");let n=r/32,{addresses:i}=y.n_([y.A9(publicKey(),n,"addresses")]).decode(e.slice(56));return{deactivationSlot:t.deactivationSlot,lastExtendedSlot:t.lastExtendedSlot,lastExtendedSlotStartIndex:t.lastExtendedStartIndex,authority:0!==t.authority.length?new PublicKey(t.authority[0]):void 0,addresses:i.map(e=>new PublicKey(e))}}};let er={index:1,layout:y.n_([y.Jq("typeIndex"),u64("deactivationSlot"),y._O("lastExtendedSlot"),y.u8("lastExtendedStartIndex"),y.u8(),y.A9(publicKey(),y.cv(y.u8(),-1),"authority")])},en=/^[^:]+:\/\/([^:[]+|\[[^\]]+\])(:\d+)?(.*)/i;function makeWebsocketUrl(e){let t=e.match(en);if(null==t)throw TypeError(`Failed to validate endpoint URL \`${e}\``);let[r,n,i,s]=t,o=e.startsWith("https:")?"wss:":"ws:",a=null==i?null:parseInt(i.slice(1),10),c=null==a?"":`:${a+1}`;return`${o}//${n}${c}${s}`}let ei=(0,f.oQ)((0,f.eE)(PublicKey),(0,f.Z_)(),e=>new PublicKey(e)),es=(0,f.bc)([(0,f.Z_)(),(0,f.i0)("base64")]),eo=(0,f.oQ)((0,f.eE)(a.Buffer),es,e=>a.Buffer.from(e[0],"base64")),ea=3e4;function assertEndpointUrl(e){if(!1===/^https?:/.test(e))throw TypeError("Endpoint URL must start with `http:` or `https:`.");return e}function extractCommitmentFromConfig(e){let t,r;if("string"==typeof e)t=e;else if(e){let{commitment:n,...i}=e;t=n,r=i}return{commitment:t,config:r}}function applyDefaultMemcmpEncodingToFilters(e){return e.map(e=>"memcmp"in e?{...e,memcmp:{...e.memcmp,encoding:e.memcmp.encoding??"base58"}}:e)}function createRpcResult(e){return(0,f.G0)([(0,f.dt)({jsonrpc:(0,f.i0)("2.0"),id:(0,f.Z_)(),result:e}),(0,f.dt)({jsonrpc:(0,f.i0)("2.0"),id:(0,f.Z_)(),error:(0,f.dt)({code:(0,f._4)(),message:(0,f.Z_)(),data:(0,f.jt)((0,f.Yj)())})})])}let ec=createRpcResult((0,f._4)());function jsonRpcResult(e){return(0,f.oQ)(createRpcResult(e),ec,t=>"error"in t?t:{...t,result:(0,f.Ue)(t.result,e)})}function jsonRpcResultAndContext(e){return jsonRpcResult((0,f.dt)({context:(0,f.dt)({slot:(0,f.Rx)()}),value:e}))}function notificationResultAndContext(e){return(0,f.dt)({context:(0,f.dt)({slot:(0,f.Rx)()}),value:e})}function versionedMessageFromResponse(e,t){return 0===e?new MessageV0({header:t.header,staticAccountKeys:t.accountKeys.map(e=>new PublicKey(e)),recentBlockhash:t.recentBlockhash,compiledInstructions:t.instructions.map(e=>({programIdIndex:e.programIdIndex,accountKeyIndexes:e.accounts,data:h().decode(e.data)})),addressTableLookups:t.addressTableLookups}):new Message(t)}let eu=(0,f.dt)({foundation:(0,f.Rx)(),foundationTerm:(0,f.Rx)(),initial:(0,f.Rx)(),taper:(0,f.Rx)(),terminal:(0,f.Rx)()}),el=jsonRpcResult((0,f.IX)((0,f.AG)((0,f.dt)({epoch:(0,f.Rx)(),effectiveSlot:(0,f.Rx)(),amount:(0,f.Rx)(),postBalance:(0,f.Rx)(),commission:(0,f.jt)((0,f.AG)((0,f.Rx)()))})))),ed=(0,f.IX)((0,f.dt)({slot:(0,f.Rx)(),prioritizationFee:(0,f.Rx)()})),eh=(0,f.dt)({total:(0,f.Rx)(),validator:(0,f.Rx)(),foundation:(0,f.Rx)(),epoch:(0,f.Rx)()}),eg=(0,f.dt)({epoch:(0,f.Rx)(),slotIndex:(0,f.Rx)(),slotsInEpoch:(0,f.Rx)(),absoluteSlot:(0,f.Rx)(),blockHeight:(0,f.jt)((0,f.Rx)()),transactionCount:(0,f.jt)((0,f.Rx)())}),ep=(0,f.dt)({slotsPerEpoch:(0,f.Rx)(),leaderScheduleSlotOffset:(0,f.Rx)(),warmup:(0,f.O7)(),firstNormalEpoch:(0,f.Rx)(),firstNormalSlot:(0,f.Rx)()}),ey=(0,f.IM)((0,f.Z_)(),(0,f.IX)((0,f.Rx)())),em=(0,f.AG)((0,f.G0)([(0,f.dt)({}),(0,f.Z_)()])),ef=(0,f.dt)({err:em}),eb=(0,f.i0)("receivedSignature"),ek=(0,f.dt)({"solana-core":(0,f.Z_)(),"feature-set":(0,f.jt)((0,f.Rx)())}),eS=(0,f.dt)({program:(0,f.Z_)(),programId:ei,parsed:(0,f._4)()}),ew=(0,f.dt)({programId:ei,accounts:(0,f.IX)(ei),data:(0,f.Z_)()}),eI=jsonRpcResultAndContext((0,f.dt)({err:(0,f.AG)((0,f.G0)([(0,f.dt)({}),(0,f.Z_)()])),logs:(0,f.AG)((0,f.IX)((0,f.Z_)())),accounts:(0,f.jt)((0,f.AG)((0,f.IX)((0,f.AG)((0,f.dt)({executable:(0,f.O7)(),owner:(0,f.Z_)(),lamports:(0,f.Rx)(),data:(0,f.IX)((0,f.Z_)()),rentEpoch:(0,f.jt)((0,f.Rx)())}))))),unitsConsumed:(0,f.jt)((0,f.Rx)()),returnData:(0,f.jt)((0,f.AG)((0,f.dt)({programId:(0,f.Z_)(),data:(0,f.bc)([(0,f.Z_)(),(0,f.i0)("base64")])}))),innerInstructions:(0,f.jt)((0,f.AG)((0,f.IX)((0,f.dt)({index:(0,f.Rx)(),instructions:(0,f.IX)((0,f.G0)([eS,ew]))}))))})),e_=jsonRpcResultAndContext((0,f.dt)({byIdentity:(0,f.IM)((0,f.Z_)(),(0,f.IX)((0,f.Rx)())),range:(0,f.dt)({firstSlot:(0,f.Rx)(),lastSlot:(0,f.Rx)()})}));function createRpcClient(e,t,r,n,i,s){let o,a;let c=r||et;null!=s&&console.warn("You have supplied an `httpAgent` when creating a `Connection` in a browser environment.It has been ignored; `httpAgent` is only used in Node environments."),n&&(a=async(e,t)=>{let r=await new Promise((r,i)=>{try{n(e,t,(e,t)=>r([e,t]))}catch(e){i(e)}});return await c(...r)});let u=new(k())(async(r,n)=>{let s={method:"POST",body:r,agent:o,headers:Object.assign({"Content-Type":"application/json"},t||{},tK)};try{let t,r=5,o=500;for(;t=a?await a(e,s):await c(e,s),429===t.status&&!0!==i&&(r-=1,0!==r);)console.error(`Server responded with ${t.status} ${t.statusText}.  Retrying after ${o}ms delay...`),await sleep(o),o*=2;let u=await t.text();t.ok?n(null,u):n(Error(`${t.status} ${t.statusText}: ${u}`))}catch(e){e instanceof Error&&n(e)}},{});return u}function createRpcRequest(e){return(t,r)=>new Promise((n,i)=>{e.request(t,r,(e,t)=>{if(e){i(e);return}n(t)})})}function createRpcBatchRequest(e){return t=>new Promise((r,n)=>{0===t.length&&r([]);let i=t.map(t=>e.request(t.methodName,t.args));e.request(i,(e,t)=>{if(e){n(e);return}r(t)})})}let eR=jsonRpcResult(eu),eA=jsonRpcResult(eh),eP=jsonRpcResult(ed),ex=jsonRpcResult(eg),eE=jsonRpcResult(ep),eC=jsonRpcResult(ey),eT=jsonRpcResult((0,f.Rx)()),ev=jsonRpcResultAndContext((0,f.dt)({total:(0,f.Rx)(),circulating:(0,f.Rx)(),nonCirculating:(0,f.Rx)(),nonCirculatingAccounts:(0,f.IX)(ei)})),eB=(0,f.dt)({amount:(0,f.Z_)(),uiAmount:(0,f.AG)((0,f.Rx)()),decimals:(0,f.Rx)(),uiAmountString:(0,f.jt)((0,f.Z_)())}),eK=jsonRpcResultAndContext((0,f.IX)((0,f.dt)({address:ei,amount:(0,f.Z_)(),uiAmount:(0,f.AG)((0,f.Rx)()),decimals:(0,f.Rx)(),uiAmountString:(0,f.jt)((0,f.Z_)())}))),eO=jsonRpcResultAndContext((0,f.IX)((0,f.dt)({pubkey:ei,account:(0,f.dt)({executable:(0,f.O7)(),owner:ei,lamports:(0,f.Rx)(),data:eo,rentEpoch:(0,f.Rx)()})}))),eL=(0,f.dt)({program:(0,f.Z_)(),parsed:(0,f._4)(),space:(0,f.Rx)()}),eN=jsonRpcResultAndContext((0,f.IX)((0,f.dt)({pubkey:ei,account:(0,f.dt)({executable:(0,f.O7)(),owner:ei,lamports:(0,f.Rx)(),data:eL,rentEpoch:(0,f.Rx)()})}))),eW=jsonRpcResultAndContext((0,f.IX)((0,f.dt)({lamports:(0,f.Rx)(),address:ei}))),ez=(0,f.dt)({executable:(0,f.O7)(),owner:ei,lamports:(0,f.Rx)(),data:eo,rentEpoch:(0,f.Rx)()}),eU=(0,f.dt)({pubkey:ei,account:ez}),eq=(0,f.oQ)((0,f.G0)([(0,f.eE)(a.Buffer),eL]),(0,f.G0)([es,eL]),e=>Array.isArray(e)?(0,f.Ue)(e,eo):e),ej=(0,f.dt)({executable:(0,f.O7)(),owner:ei,lamports:(0,f.Rx)(),data:eq,rentEpoch:(0,f.Rx)()}),eD=(0,f.dt)({pubkey:ei,account:ej}),eJ=(0,f.dt)({state:(0,f.G0)([(0,f.i0)("active"),(0,f.i0)("inactive"),(0,f.i0)("activating"),(0,f.i0)("deactivating")]),active:(0,f.Rx)(),inactive:(0,f.Rx)()}),eM=jsonRpcResult((0,f.IX)((0,f.dt)({signature:(0,f.Z_)(),slot:(0,f.Rx)(),err:em,memo:(0,f.AG)((0,f.Z_)()),blockTime:(0,f.jt)((0,f.AG)((0,f.Rx)()))}))),eV=jsonRpcResult((0,f.IX)((0,f.dt)({signature:(0,f.Z_)(),slot:(0,f.Rx)(),err:em,memo:(0,f.AG)((0,f.Z_)()),blockTime:(0,f.jt)((0,f.AG)((0,f.Rx)()))}))),e$=(0,f.dt)({subscription:(0,f.Rx)(),result:notificationResultAndContext(ez)}),eF=(0,f.dt)({pubkey:ei,account:ez}),eG=(0,f.dt)({subscription:(0,f.Rx)(),result:notificationResultAndContext(eF)}),eH=(0,f.dt)({parent:(0,f.Rx)(),slot:(0,f.Rx)(),root:(0,f.Rx)()}),eZ=(0,f.dt)({subscription:(0,f.Rx)(),result:eH}),eX=(0,f.G0)([(0,f.dt)({type:(0,f.G0)([(0,f.i0)("firstShredReceived"),(0,f.i0)("completed"),(0,f.i0)("optimisticConfirmation"),(0,f.i0)("root")]),slot:(0,f.Rx)(),timestamp:(0,f.Rx)()}),(0,f.dt)({type:(0,f.i0)("createdBank"),parent:(0,f.Rx)(),slot:(0,f.Rx)(),timestamp:(0,f.Rx)()}),(0,f.dt)({type:(0,f.i0)("frozen"),slot:(0,f.Rx)(),timestamp:(0,f.Rx)(),stats:(0,f.dt)({numTransactionEntries:(0,f.Rx)(),numSuccessfulTransactions:(0,f.Rx)(),numFailedTransactions:(0,f.Rx)(),maxTransactionsPerEntry:(0,f.Rx)()})}),(0,f.dt)({type:(0,f.i0)("dead"),slot:(0,f.Rx)(),timestamp:(0,f.Rx)(),err:(0,f.Z_)()})]),eY=(0,f.dt)({subscription:(0,f.Rx)(),result:eX}),eQ=(0,f.dt)({subscription:(0,f.Rx)(),result:notificationResultAndContext((0,f.G0)([ef,eb]))}),e0=(0,f.dt)({subscription:(0,f.Rx)(),result:(0,f.Rx)()}),e1=(0,f.dt)({pubkey:(0,f.Z_)(),gossip:(0,f.AG)((0,f.Z_)()),tpu:(0,f.AG)((0,f.Z_)()),rpc:(0,f.AG)((0,f.Z_)()),version:(0,f.AG)((0,f.Z_)())}),e2=(0,f.dt)({votePubkey:(0,f.Z_)(),nodePubkey:(0,f.Z_)(),activatedStake:(0,f.Rx)(),epochVoteAccount:(0,f.O7)(),epochCredits:(0,f.IX)((0,f.bc)([(0,f.Rx)(),(0,f.Rx)(),(0,f.Rx)()])),commission:(0,f.Rx)(),lastVote:(0,f.Rx)(),rootSlot:(0,f.AG)((0,f.Rx)())}),e8=jsonRpcResult((0,f.dt)({current:(0,f.IX)(e2),delinquent:(0,f.IX)(e2)})),e5=(0,f.G0)([(0,f.i0)("processed"),(0,f.i0)("confirmed"),(0,f.i0)("finalized")]),e4=(0,f.dt)({slot:(0,f.Rx)(),confirmations:(0,f.AG)((0,f.Rx)()),err:em,confirmationStatus:(0,f.jt)(e5)}),e3=jsonRpcResultAndContext((0,f.IX)((0,f.AG)(e4))),e6=jsonRpcResult((0,f.Rx)()),e9=(0,f.dt)({accountKey:ei,writableIndexes:(0,f.IX)((0,f.Rx)()),readonlyIndexes:(0,f.IX)((0,f.Rx)())}),e7=(0,f.dt)({signatures:(0,f.IX)((0,f.Z_)()),message:(0,f.dt)({accountKeys:(0,f.IX)((0,f.Z_)()),header:(0,f.dt)({numRequiredSignatures:(0,f.Rx)(),numReadonlySignedAccounts:(0,f.Rx)(),numReadonlyUnsignedAccounts:(0,f.Rx)()}),instructions:(0,f.IX)((0,f.dt)({accounts:(0,f.IX)((0,f.Rx)()),data:(0,f.Z_)(),programIdIndex:(0,f.Rx)()})),recentBlockhash:(0,f.Z_)(),addressTableLookups:(0,f.jt)((0,f.IX)(e9))})}),te=(0,f.dt)({pubkey:ei,signer:(0,f.O7)(),writable:(0,f.O7)(),source:(0,f.jt)((0,f.G0)([(0,f.i0)("transaction"),(0,f.i0)("lookupTable")]))}),tt=(0,f.dt)({accountKeys:(0,f.IX)(te),signatures:(0,f.IX)((0,f.Z_)())}),tr=(0,f.dt)({parsed:(0,f._4)(),program:(0,f.Z_)(),programId:ei}),tn=(0,f.dt)({accounts:(0,f.IX)(ei),data:(0,f.Z_)(),programId:ei}),ti=(0,f.G0)([tn,tr]),ts=(0,f.G0)([(0,f.dt)({parsed:(0,f._4)(),program:(0,f.Z_)(),programId:(0,f.Z_)()}),(0,f.dt)({accounts:(0,f.IX)((0,f.Z_)()),data:(0,f.Z_)(),programId:(0,f.Z_)()})]),to=(0,f.oQ)(ti,ts,e=>"accounts"in e?(0,f.Ue)(e,tn):(0,f.Ue)(e,tr)),ta=(0,f.dt)({signatures:(0,f.IX)((0,f.Z_)()),message:(0,f.dt)({accountKeys:(0,f.IX)(te),instructions:(0,f.IX)(to),recentBlockhash:(0,f.Z_)(),addressTableLookups:(0,f.jt)((0,f.AG)((0,f.IX)(e9)))})}),tc=(0,f.dt)({accountIndex:(0,f.Rx)(),mint:(0,f.Z_)(),owner:(0,f.jt)((0,f.Z_)()),programId:(0,f.jt)((0,f.Z_)()),uiTokenAmount:eB}),tu=(0,f.dt)({writable:(0,f.IX)(ei),readonly:(0,f.IX)(ei)}),tl=(0,f.dt)({err:em,fee:(0,f.Rx)(),innerInstructions:(0,f.jt)((0,f.AG)((0,f.IX)((0,f.dt)({index:(0,f.Rx)(),instructions:(0,f.IX)((0,f.dt)({accounts:(0,f.IX)((0,f.Rx)()),data:(0,f.Z_)(),programIdIndex:(0,f.Rx)()}))})))),preBalances:(0,f.IX)((0,f.Rx)()),postBalances:(0,f.IX)((0,f.Rx)()),logMessages:(0,f.jt)((0,f.AG)((0,f.IX)((0,f.Z_)()))),preTokenBalances:(0,f.jt)((0,f.AG)((0,f.IX)(tc))),postTokenBalances:(0,f.jt)((0,f.AG)((0,f.IX)(tc))),loadedAddresses:(0,f.jt)(tu),computeUnitsConsumed:(0,f.jt)((0,f.Rx)()),costUnits:(0,f.jt)((0,f.Rx)())}),td=(0,f.dt)({err:em,fee:(0,f.Rx)(),innerInstructions:(0,f.jt)((0,f.AG)((0,f.IX)((0,f.dt)({index:(0,f.Rx)(),instructions:(0,f.IX)(to)})))),preBalances:(0,f.IX)((0,f.Rx)()),postBalances:(0,f.IX)((0,f.Rx)()),logMessages:(0,f.jt)((0,f.AG)((0,f.IX)((0,f.Z_)()))),preTokenBalances:(0,f.jt)((0,f.AG)((0,f.IX)(tc))),postTokenBalances:(0,f.jt)((0,f.AG)((0,f.IX)(tc))),loadedAddresses:(0,f.jt)(tu),computeUnitsConsumed:(0,f.jt)((0,f.Rx)()),costUnits:(0,f.jt)((0,f.Rx)())}),th=(0,f.G0)([(0,f.i0)(0),(0,f.i0)("legacy")]),tg=(0,f.dt)({pubkey:(0,f.Z_)(),lamports:(0,f.Rx)(),postBalance:(0,f.AG)((0,f.Rx)()),rewardType:(0,f.AG)((0,f.Z_)()),commission:(0,f.jt)((0,f.AG)((0,f.Rx)()))}),tp=jsonRpcResult((0,f.AG)((0,f.dt)({blockhash:(0,f.Z_)(),previousBlockhash:(0,f.Z_)(),parentSlot:(0,f.Rx)(),transactions:(0,f.IX)((0,f.dt)({transaction:e7,meta:(0,f.AG)(tl),version:(0,f.jt)(th)})),rewards:(0,f.jt)((0,f.IX)(tg)),blockTime:(0,f.AG)((0,f.Rx)()),blockHeight:(0,f.AG)((0,f.Rx)())}))),ty=jsonRpcResult((0,f.AG)((0,f.dt)({blockhash:(0,f.Z_)(),previousBlockhash:(0,f.Z_)(),parentSlot:(0,f.Rx)(),rewards:(0,f.jt)((0,f.IX)(tg)),blockTime:(0,f.AG)((0,f.Rx)()),blockHeight:(0,f.AG)((0,f.Rx)())}))),tm=jsonRpcResult((0,f.AG)((0,f.dt)({blockhash:(0,f.Z_)(),previousBlockhash:(0,f.Z_)(),parentSlot:(0,f.Rx)(),transactions:(0,f.IX)((0,f.dt)({transaction:tt,meta:(0,f.AG)(tl),version:(0,f.jt)(th)})),rewards:(0,f.jt)((0,f.IX)(tg)),blockTime:(0,f.AG)((0,f.Rx)()),blockHeight:(0,f.AG)((0,f.Rx)())}))),tf=jsonRpcResult((0,f.AG)((0,f.dt)({blockhash:(0,f.Z_)(),previousBlockhash:(0,f.Z_)(),parentSlot:(0,f.Rx)(),transactions:(0,f.IX)((0,f.dt)({transaction:ta,meta:(0,f.AG)(td),version:(0,f.jt)(th)})),rewards:(0,f.jt)((0,f.IX)(tg)),blockTime:(0,f.AG)((0,f.Rx)()),blockHeight:(0,f.AG)((0,f.Rx)())}))),tb=jsonRpcResult((0,f.AG)((0,f.dt)({blockhash:(0,f.Z_)(),previousBlockhash:(0,f.Z_)(),parentSlot:(0,f.Rx)(),transactions:(0,f.IX)((0,f.dt)({transaction:tt,meta:(0,f.AG)(td),version:(0,f.jt)(th)})),rewards:(0,f.jt)((0,f.IX)(tg)),blockTime:(0,f.AG)((0,f.Rx)()),blockHeight:(0,f.AG)((0,f.Rx)())}))),tk=jsonRpcResult((0,f.AG)((0,f.dt)({blockhash:(0,f.Z_)(),previousBlockhash:(0,f.Z_)(),parentSlot:(0,f.Rx)(),rewards:(0,f.jt)((0,f.IX)(tg)),blockTime:(0,f.AG)((0,f.Rx)()),blockHeight:(0,f.AG)((0,f.Rx)())}))),tS=jsonRpcResult((0,f.AG)((0,f.dt)({blockhash:(0,f.Z_)(),previousBlockhash:(0,f.Z_)(),parentSlot:(0,f.Rx)(),transactions:(0,f.IX)((0,f.dt)({transaction:e7,meta:(0,f.AG)(tl)})),rewards:(0,f.jt)((0,f.IX)(tg)),blockTime:(0,f.AG)((0,f.Rx)())}))),tw=jsonRpcResult((0,f.AG)((0,f.dt)({blockhash:(0,f.Z_)(),previousBlockhash:(0,f.Z_)(),parentSlot:(0,f.Rx)(),signatures:(0,f.IX)((0,f.Z_)()),blockTime:(0,f.AG)((0,f.Rx)())}))),tI=jsonRpcResult((0,f.AG)((0,f.dt)({slot:(0,f.Rx)(),meta:(0,f.AG)(tl),blockTime:(0,f.jt)((0,f.AG)((0,f.Rx)())),transaction:e7,version:(0,f.jt)(th)}))),t_=jsonRpcResult((0,f.AG)((0,f.dt)({slot:(0,f.Rx)(),transaction:ta,meta:(0,f.AG)(td),blockTime:(0,f.jt)((0,f.AG)((0,f.Rx)())),version:(0,f.jt)(th)}))),tR=jsonRpcResultAndContext((0,f.dt)({blockhash:(0,f.Z_)(),lastValidBlockHeight:(0,f.Rx)()})),tA=jsonRpcResultAndContext((0,f.O7)()),tP=(0,f.dt)({slot:(0,f.Rx)(),numTransactions:(0,f.Rx)(),numSlots:(0,f.Rx)(),samplePeriodSecs:(0,f.Rx)()}),tx=jsonRpcResult((0,f.IX)(tP)),tE=jsonRpcResultAndContext((0,f.AG)((0,f.dt)({feeCalculator:(0,f.dt)({lamportsPerSignature:(0,f.Rx)()})}))),tC=jsonRpcResult((0,f.Z_)()),tT=jsonRpcResult((0,f.Z_)()),tv=(0,f.dt)({err:em,logs:(0,f.IX)((0,f.Z_)()),signature:(0,f.Z_)()}),tB=(0,f.dt)({result:notificationResultAndContext(tv),subscription:(0,f.Rx)()}),tK={"solana-client":"js/1.0.0-maintenance"};let Connection=class Connection{constructor(e,t){let r,n,i,s,o,a;this._commitment=void 0,this._confirmTransactionInitialTimeout=void 0,this._rpcEndpoint=void 0,this._rpcWsEndpoint=void 0,this._rpcClient=void 0,this._rpcRequest=void 0,this._rpcBatchRequest=void 0,this._rpcWebSocket=void 0,this._rpcWebSocketConnected=!1,this._rpcWebSocketHeartbeat=null,this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketGeneration=0,this._disableBlockhashCaching=!1,this._pollingBlockhash=!1,this._blockhashInfo={latestBlockhash:null,lastFetch:0,transactionSignatures:[],simulatedSignatures:[]},this._nextClientSubscriptionId=0,this._subscriptionDisposeFunctionsByClientSubscriptionId={},this._subscriptionHashByClientSubscriptionId={},this._subscriptionStateChangeCallbacksByHash={},this._subscriptionCallbacksByServerSubscriptionId={},this._subscriptionsByHash={},this._subscriptionsAutoDisposedByRpc=new Set,this.getBlockHeight=(()=>{let e={};return async t=>{let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgs([],r,void 0,n),s=ee(i);return e[s]=e[s]??(async()=>{try{let e=await this._rpcRequest("getBlockHeight",i),t=(0,f.Ue)(e,jsonRpcResult((0,f.Rx)()));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get block height information");return t.result}finally{delete e[s]}})(),await e[s]}})(),t&&"string"==typeof t?this._commitment=t:t&&(this._commitment=t.commitment,this._confirmTransactionInitialTimeout=t.confirmTransactionInitialTimeout,r=t.wsEndpoint,n=t.httpHeaders,i=t.fetch,s=t.fetchMiddleware,o=t.disableRetryOnRateLimit,a=t.httpAgent),this._rpcEndpoint=assertEndpointUrl(e),this._rpcWsEndpoint=r||makeWebsocketUrl(e),this._rpcClient=createRpcClient(e,n,i,s,o,a),this._rpcRequest=createRpcRequest(this._rpcClient),this._rpcBatchRequest=createRpcBatchRequest(this._rpcClient),this._rpcWebSocket=new RpcWebSocketClient(this._rpcWsEndpoint,{autoconnect:!1,max_reconnects:1/0}),this._rpcWebSocket.on("open",this._wsOnOpen.bind(this)),this._rpcWebSocket.on("error",this._wsOnError.bind(this)),this._rpcWebSocket.on("close",this._wsOnClose.bind(this)),this._rpcWebSocket.on("accountNotification",this._wsOnAccountNotification.bind(this)),this._rpcWebSocket.on("programNotification",this._wsOnProgramAccountNotification.bind(this)),this._rpcWebSocket.on("slotNotification",this._wsOnSlotNotification.bind(this)),this._rpcWebSocket.on("slotsUpdatesNotification",this._wsOnSlotUpdatesNotification.bind(this)),this._rpcWebSocket.on("signatureNotification",this._wsOnSignatureNotification.bind(this)),this._rpcWebSocket.on("rootNotification",this._wsOnRootNotification.bind(this)),this._rpcWebSocket.on("logsNotification",this._wsOnLogsNotification.bind(this))}get commitment(){return this._commitment}get rpcEndpoint(){return this._rpcEndpoint}async getBalanceAndContext(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgs([e.toBase58()],r,void 0,n),s=await this._rpcRequest("getBalance",i),o=(0,f.Ue)(s,jsonRpcResultAndContext((0,f.Rx)()));if("error"in o)throw new SolanaJSONRPCError(o.error,`failed to get balance for ${e.toBase58()}`);return o.result}async getBalance(e,t){return await this.getBalanceAndContext(e,t).then(e=>e.value).catch(t=>{throw Error("failed to get balance of account "+e.toBase58()+": "+t)})}async getBlockTime(e){let t=await this._rpcRequest("getBlockTime",[e]),r=(0,f.Ue)(t,jsonRpcResult((0,f.AG)((0,f.Rx)())));if("error"in r)throw new SolanaJSONRPCError(r.error,`failed to get block time for slot ${e}`);return r.result}async getMinimumLedgerSlot(){let e=await this._rpcRequest("minimumLedgerSlot",[]),t=(0,f.Ue)(e,jsonRpcResult((0,f.Rx)()));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get minimum ledger slot");return t.result}async getFirstAvailableBlock(){let e=await this._rpcRequest("getFirstAvailableBlock",[]),t=(0,f.Ue)(e,eT);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get first available block");return t.result}async getSupply(e){let t={};t="string"==typeof e?{commitment:e}:e?{...e,commitment:e&&e.commitment||this.commitment}:{commitment:this.commitment};let r=await this._rpcRequest("getSupply",[t]),n=(0,f.Ue)(r,ev);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get supply");return n.result}async getTokenSupply(e,t){let r=this._buildArgs([e.toBase58()],t),n=await this._rpcRequest("getTokenSupply",r),i=(0,f.Ue)(n,jsonRpcResultAndContext(eB));if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get token supply");return i.result}async getTokenAccountBalance(e,t){let r=this._buildArgs([e.toBase58()],t),n=await this._rpcRequest("getTokenAccountBalance",r),i=(0,f.Ue)(n,jsonRpcResultAndContext(eB));if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get token account balance");return i.result}async getTokenAccountsByOwner(e,t,r){let{commitment:n,config:i}=extractCommitmentFromConfig(r),s=[e.toBase58()];"mint"in t?s.push({mint:t.mint.toBase58()}):s.push({programId:t.programId.toBase58()});let o=this._buildArgs(s,n,"base64",i),a=await this._rpcRequest("getTokenAccountsByOwner",o),c=(0,f.Ue)(a,eO);if("error"in c)throw new SolanaJSONRPCError(c.error,`failed to get token accounts owned by account ${e.toBase58()}`);return c.result}async getParsedTokenAccountsByOwner(e,t,r){let n=[e.toBase58()];"mint"in t?n.push({mint:t.mint.toBase58()}):n.push({programId:t.programId.toBase58()});let i=this._buildArgs(n,r,"jsonParsed"),s=await this._rpcRequest("getTokenAccountsByOwner",i),o=(0,f.Ue)(s,eN);if("error"in o)throw new SolanaJSONRPCError(o.error,`failed to get token accounts owned by account ${e.toBase58()}`);return o.result}async getLargestAccounts(e){let t={...e,commitment:e&&e.commitment||this.commitment},r=t.filter||t.commitment?[t]:[],n=await this._rpcRequest("getLargestAccounts",r),i=(0,f.Ue)(n,eW);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get largest accounts");return i.result}async getTokenLargestAccounts(e,t){let r=this._buildArgs([e.toBase58()],t),n=await this._rpcRequest("getTokenLargestAccounts",r),i=(0,f.Ue)(n,eK);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get token largest accounts");return i.result}async getAccountInfoAndContext(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgs([e.toBase58()],r,"base64",n),s=await this._rpcRequest("getAccountInfo",i),o=(0,f.Ue)(s,jsonRpcResultAndContext((0,f.AG)(ez)));if("error"in o)throw new SolanaJSONRPCError(o.error,`failed to get info about account ${e.toBase58()}`);return o.result}async getParsedAccountInfo(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgs([e.toBase58()],r,"jsonParsed",n),s=await this._rpcRequest("getAccountInfo",i),o=(0,f.Ue)(s,jsonRpcResultAndContext((0,f.AG)(ej)));if("error"in o)throw new SolanaJSONRPCError(o.error,`failed to get info about account ${e.toBase58()}`);return o.result}async getAccountInfo(e,t){try{let r=await this.getAccountInfoAndContext(e,t);return r.value}catch(t){throw Error("failed to get info about account "+e.toBase58()+": "+t)}}async getMultipleParsedAccounts(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=e.map(e=>e.toBase58()),s=this._buildArgs([i],r,"jsonParsed",n),o=await this._rpcRequest("getMultipleAccounts",s),a=(0,f.Ue)(o,jsonRpcResultAndContext((0,f.IX)((0,f.AG)(ej))));if("error"in a)throw new SolanaJSONRPCError(a.error,`failed to get info for accounts ${i}`);return a.result}async getMultipleAccountsInfoAndContext(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=e.map(e=>e.toBase58()),s=this._buildArgs([i],r,"base64",n),o=await this._rpcRequest("getMultipleAccounts",s),a=(0,f.Ue)(o,jsonRpcResultAndContext((0,f.IX)((0,f.AG)(ez))));if("error"in a)throw new SolanaJSONRPCError(a.error,`failed to get info for accounts ${i}`);return a.result}async getMultipleAccountsInfo(e,t){let r=await this.getMultipleAccountsInfoAndContext(e,t);return r.value}async getStakeActivation(e,t,r){let{commitment:n,config:i}=extractCommitmentFromConfig(t),s=this._buildArgs([e.toBase58()],n,void 0,{...i,epoch:null!=r?r:i?.epoch}),o=await this._rpcRequest("getStakeActivation",s),a=(0,f.Ue)(o,jsonRpcResult(eJ));if("error"in a)throw new SolanaJSONRPCError(a.error,`failed to get Stake Activation ${e.toBase58()}`);return a.result}async getProgramAccounts(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),{encoding:i,...s}=n||{},o=this._buildArgs([e.toBase58()],r,i||"base64",{...s,...s.filters?{filters:applyDefaultMemcmpEncodingToFilters(s.filters)}:null}),a=await this._rpcRequest("getProgramAccounts",o),c=(0,f.IX)(eU),u=!0===s.withContext?(0,f.Ue)(a,jsonRpcResultAndContext(c)):(0,f.Ue)(a,jsonRpcResult(c));if("error"in u)throw new SolanaJSONRPCError(u.error,`failed to get accounts owned by program ${e.toBase58()}`);return u.result}async getParsedProgramAccounts(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgs([e.toBase58()],r,"jsonParsed",n),s=await this._rpcRequest("getProgramAccounts",i),o=(0,f.Ue)(s,jsonRpcResult((0,f.IX)(eD)));if("error"in o)throw new SolanaJSONRPCError(o.error,`failed to get accounts owned by program ${e.toBase58()}`);return o.result}async confirmTransaction(e,t){let r,n;if("string"==typeof e)r=e;else{if(e.abortSignal?.aborted)return Promise.reject(e.abortSignal.reason);r=e.signature}try{n=h().decode(r)}catch(e){throw Error("signature must be base58 encoded: "+r)}return(assert(64===n.length,"signature has invalid length"),"string"==typeof e)?await this.confirmTransactionUsingLegacyTimeoutStrategy({commitment:t||this.commitment,signature:r}):"lastValidBlockHeight"in e?await this.confirmTransactionUsingBlockHeightExceedanceStrategy({commitment:t||this.commitment,strategy:e}):await this.confirmTransactionUsingDurableNonceStrategy({commitment:t||this.commitment,strategy:e})}getCancellationPromise(e){return new Promise((t,r)=>{null!=e&&(e.aborted?r(e.reason):e.addEventListener("abort",()=>{r(e.reason)}))})}getTransactionConfirmationPromise({commitment:e,signature:t}){let r,n;let i=!1,s=new Promise((s,o)=>{try{r=this.onSignature(t,(e,t)=>{r=void 0,s({__type:N.PROCESSED,response:{context:t,value:e}})},e);let a=new Promise(e=>{null==r?e():n=this._onSubscriptionStateChange(r,t=>{"subscribed"===t&&e()})});(async()=>{if(await a,i)return;let r=await this.getSignatureStatus(t);if(i||null==r)return;let{context:n,value:c}=r;if(null!=c){if(c?.err)o(c.err);else{switch(e){case"confirmed":case"single":case"singleGossip":if("processed"===c.confirmationStatus)return;break;case"finalized":case"max":case"root":if("processed"===c.confirmationStatus||"confirmed"===c.confirmationStatus)return}i=!0,s({__type:N.PROCESSED,response:{context:n,value:c}})}}})()}catch(e){o(e)}});return{abortConfirmation:()=>{n&&(n(),n=void 0),null!=r&&(this.removeSignatureListener(r),r=void 0)},confirmationPromise:s}}async confirmTransactionUsingBlockHeightExceedanceStrategy({commitment:e,strategy:{abortSignal:t,lastValidBlockHeight:r,signature:n}}){let i,s=!1,o=new Promise(t=>{let checkBlockHeight=async()=>{try{let t=await this.getBlockHeight(e);return t}catch(e){return -1}};(async()=>{let e=await checkBlockHeight();if(!s){for(;e<=r;)if(await sleep(1e3),s||(e=await checkBlockHeight(),s))return;t({__type:N.BLOCKHEIGHT_EXCEEDED})}})()}),{abortConfirmation:a,confirmationPromise:c}=this.getTransactionConfirmationPromise({commitment:e,signature:n}),u=this.getCancellationPromise(t);try{let e=await Promise.race([u,c,o]);if(e.__type===N.PROCESSED)i=e.response;else throw new TransactionExpiredBlockheightExceededError(n)}finally{s=!0,a()}return i}async confirmTransactionUsingDurableNonceStrategy({commitment:e,strategy:{abortSignal:t,minContextSlot:r,nonceAccountPubkey:n,nonceValue:i,signature:s}}){let o,a=!1,c=new Promise(t=>{let s=i,o=null,getCurrentNonceValue=async()=>{try{let{context:t,value:i}=await this.getNonceAndContext(n,{commitment:e,minContextSlot:r});return o=t.slot,i?.nonce}catch(e){return s}};(async()=>{if(s=await getCurrentNonceValue(),!a)for(;;){if(i!==s){t({__type:N.NONCE_INVALID,slotInWhichNonceDidAdvance:o});return}if(await sleep(2e3),a||(s=await getCurrentNonceValue(),a))return}})()}),{abortConfirmation:u,confirmationPromise:l}=this.getTransactionConfirmationPromise({commitment:e,signature:s}),d=this.getCancellationPromise(t);try{let t=await Promise.race([d,l,c]);if(t.__type===N.PROCESSED)o=t.response;else{let n;for(;;){let e=await this.getSignatureStatus(s);if(null==e)break;if(e.context.slot<(t.slotInWhichNonceDidAdvance??r)){await sleep(400);continue}n=e;break}if(n?.value){let t=e||"finalized",{confirmationStatus:r}=n.value;switch(t){case"processed":case"recent":if("processed"!==r&&"confirmed"!==r&&"finalized"!==r)throw new TransactionExpiredNonceInvalidError(s);break;case"confirmed":case"single":case"singleGossip":if("confirmed"!==r&&"finalized"!==r)throw new TransactionExpiredNonceInvalidError(s);break;case"finalized":case"max":case"root":if("finalized"!==r)throw new TransactionExpiredNonceInvalidError(s)}o={context:n.context,value:{err:n.value.err}}}else throw new TransactionExpiredNonceInvalidError(s)}}finally{a=!0,u()}return o}async confirmTransactionUsingLegacyTimeoutStrategy({commitment:e,signature:t}){let r,n;let i=new Promise(t=>{let n=this._confirmTransactionInitialTimeout||6e4;switch(e){case"processed":case"recent":case"single":case"confirmed":case"singleGossip":n=this._confirmTransactionInitialTimeout||3e4}r=setTimeout(()=>t({__type:N.TIMED_OUT,timeoutMs:n}),n)}),{abortConfirmation:s,confirmationPromise:o}=this.getTransactionConfirmationPromise({commitment:e,signature:t});try{let e=await Promise.race([o,i]);if(e.__type===N.PROCESSED)n=e.response;else throw new TransactionExpiredTimeoutError(t,e.timeoutMs/1e3)}finally{clearTimeout(r),s()}return n}async getClusterNodes(){let e=await this._rpcRequest("getClusterNodes",[]),t=(0,f.Ue)(e,jsonRpcResult((0,f.IX)(e1)));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get cluster nodes");return t.result}async getVoteAccounts(e){let t=this._buildArgs([],e),r=await this._rpcRequest("getVoteAccounts",t),n=(0,f.Ue)(r,e8);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get vote accounts");return n.result}async getSlot(e){let{commitment:t,config:r}=extractCommitmentFromConfig(e),n=this._buildArgs([],t,void 0,r),i=await this._rpcRequest("getSlot",n),s=(0,f.Ue)(i,jsonRpcResult((0,f.Rx)()));if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get slot");return s.result}async getSlotLeader(e){let{commitment:t,config:r}=extractCommitmentFromConfig(e),n=this._buildArgs([],t,void 0,r),i=await this._rpcRequest("getSlotLeader",n),s=(0,f.Ue)(i,jsonRpcResult((0,f.Z_)()));if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get slot leader");return s.result}async getSlotLeaders(e,t){let r=await this._rpcRequest("getSlotLeaders",[e,t]),n=(0,f.Ue)(r,jsonRpcResult((0,f.IX)(ei)));if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get slot leaders");return n.result}async getSignatureStatus(e,t){let{context:r,value:n}=await this.getSignatureStatuses([e],t);assert(1===n.length);let i=n[0];return{context:r,value:i}}async getSignatureStatuses(e,t){let r=[e];t&&r.push(t);let n=await this._rpcRequest("getSignatureStatuses",r),i=(0,f.Ue)(n,e3);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get signature status");return i.result}async getTransactionCount(e){let{commitment:t,config:r}=extractCommitmentFromConfig(e),n=this._buildArgs([],t,void 0,r),i=await this._rpcRequest("getTransactionCount",n),s=(0,f.Ue)(i,jsonRpcResult((0,f.Rx)()));if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get transaction count");return s.result}async getTotalSupply(e){let t=await this.getSupply({commitment:e,excludeNonCirculatingAccountsList:!0});return t.value.total}async getInflationGovernor(e){let t=this._buildArgs([],e),r=await this._rpcRequest("getInflationGovernor",t),n=(0,f.Ue)(r,eR);if("error"in n)throw new SolanaJSONRPCError(n.error,"failed to get inflation");return n.result}async getInflationReward(e,t,r){let{commitment:n,config:i}=extractCommitmentFromConfig(r),s=this._buildArgs([e.map(e=>e.toBase58())],n,void 0,{...i,epoch:null!=t?t:i?.epoch}),o=await this._rpcRequest("getInflationReward",s),a=(0,f.Ue)(o,el);if("error"in a)throw new SolanaJSONRPCError(a.error,"failed to get inflation reward");return a.result}async getInflationRate(){let e=await this._rpcRequest("getInflationRate",[]),t=(0,f.Ue)(e,eA);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get inflation rate");return t.result}async getEpochInfo(e){let{commitment:t,config:r}=extractCommitmentFromConfig(e),n=this._buildArgs([],t,void 0,r),i=await this._rpcRequest("getEpochInfo",n),s=(0,f.Ue)(i,ex);if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get epoch info");return s.result}async getEpochSchedule(){let e=await this._rpcRequest("getEpochSchedule",[]),t=(0,f.Ue)(e,eE);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get epoch schedule");let r=t.result;return new EpochSchedule(r.slotsPerEpoch,r.leaderScheduleSlotOffset,r.warmup,r.firstNormalEpoch,r.firstNormalSlot)}async getLeaderSchedule(){let e=await this._rpcRequest("getLeaderSchedule",[]),t=(0,f.Ue)(e,eC);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get leader schedule");return t.result}async getMinimumBalanceForRentExemption(e,t){let r=this._buildArgs([e],t),n=await this._rpcRequest("getMinimumBalanceForRentExemption",r),i=(0,f.Ue)(n,e6);return"error"in i?(console.warn("Unable to fetch minimum balance for rent exemption"),0):i.result}async getRecentBlockhashAndContext(e){let{context:t,value:{blockhash:r}}=await this.getLatestBlockhashAndContext(e);return{context:t,value:{blockhash:r,feeCalculator:{get lamportsPerSignature(){throw Error("The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee for a given message.")},toJSON:()=>({})}}}}async getRecentPerformanceSamples(e){let t=await this._rpcRequest("getRecentPerformanceSamples",e?[e]:[]),r=(0,f.Ue)(t,tx);if("error"in r)throw new SolanaJSONRPCError(r.error,"failed to get recent performance samples");return r.result}async getFeeCalculatorForBlockhash(e,t){let r=this._buildArgs([e],t),n=await this._rpcRequest("getFeeCalculatorForBlockhash",r),i=(0,f.Ue)(n,tE);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get fee calculator");let{context:s,value:o}=i.result;return{context:s,value:null!==o?o.feeCalculator:null}}async getFeeForMessage(e,t){let r=toBuffer(e.serialize()).toString("base64"),n=this._buildArgs([r],t),i=await this._rpcRequest("getFeeForMessage",n),s=(0,f.Ue)(i,jsonRpcResultAndContext((0,f.AG)((0,f.Rx)())));if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get fee for message");if(null===s.result)throw Error("invalid blockhash");return s.result}async getRecentPrioritizationFees(e){let t=e?.lockedWritableAccounts?.map(e=>e.toBase58()),r=t?.length?[t]:[],n=await this._rpcRequest("getRecentPrioritizationFees",r),i=(0,f.Ue)(n,eP);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get recent prioritization fees");return i.result}async getRecentBlockhash(e){try{let t=await this.getRecentBlockhashAndContext(e);return t.value}catch(e){throw Error("failed to get recent blockhash: "+e)}}async getLatestBlockhash(e){try{let t=await this.getLatestBlockhashAndContext(e);return t.value}catch(e){throw Error("failed to get recent blockhash: "+e)}}async getLatestBlockhashAndContext(e){let{commitment:t,config:r}=extractCommitmentFromConfig(e),n=this._buildArgs([],t,void 0,r),i=await this._rpcRequest("getLatestBlockhash",n),s=(0,f.Ue)(i,tR);if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get latest blockhash");return s.result}async isBlockhashValid(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgs([e],r,void 0,n),s=await this._rpcRequest("isBlockhashValid",i),o=(0,f.Ue)(s,tA);if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to determine if the blockhash `"+e+"`is valid");return o.result}async getVersion(){let e=await this._rpcRequest("getVersion",[]),t=(0,f.Ue)(e,jsonRpcResult(ek));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get version");return t.result}async getGenesisHash(){let e=await this._rpcRequest("getGenesisHash",[]),t=(0,f.Ue)(e,jsonRpcResult((0,f.Z_)()));if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get genesis hash");return t.result}async getBlock(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgsAtLeastConfirmed([e],r,void 0,n),s=await this._rpcRequest("getBlock",i);try{switch(n?.transactionDetails){case"accounts":{let e=(0,f.Ue)(s,tm);if("error"in e)throw e.error;return e.result}case"none":{let e=(0,f.Ue)(s,ty);if("error"in e)throw e.error;return e.result}default:{let e=(0,f.Ue)(s,tp);if("error"in e)throw e.error;let{result:t}=e;return t?{...t,transactions:t.transactions.map(({transaction:e,meta:t,version:r})=>({meta:t,transaction:{...e,message:versionedMessageFromResponse(r,e.message)},version:r}))}:null}}}catch(e){throw new SolanaJSONRPCError(e,"failed to get confirmed block")}}async getParsedBlock(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgsAtLeastConfirmed([e],r,"jsonParsed",n),s=await this._rpcRequest("getBlock",i);try{switch(n?.transactionDetails){case"accounts":{let e=(0,f.Ue)(s,tb);if("error"in e)throw e.error;return e.result}case"none":{let e=(0,f.Ue)(s,tk);if("error"in e)throw e.error;return e.result}default:{let e=(0,f.Ue)(s,tf);if("error"in e)throw e.error;return e.result}}}catch(e){throw new SolanaJSONRPCError(e,"failed to get block")}}async getBlockProduction(e){let t,r;if("string"==typeof e)r=e;else if(e){let{commitment:n,...i}=e;r=n,t=i}let n=this._buildArgs([],r,"base64",t),i=await this._rpcRequest("getBlockProduction",n),s=(0,f.Ue)(i,e_);if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get block production information");return s.result}async getTransaction(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgsAtLeastConfirmed([e],r,void 0,n),s=await this._rpcRequest("getTransaction",i),o=(0,f.Ue)(s,tI);if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get transaction");let a=o.result;return a?{...a,transaction:{...a.transaction,message:versionedMessageFromResponse(a.version,a.transaction.message)}}:a}async getParsedTransaction(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=this._buildArgsAtLeastConfirmed([e],r,"jsonParsed",n),s=await this._rpcRequest("getTransaction",i),o=(0,f.Ue)(s,t_);if("error"in o)throw new SolanaJSONRPCError(o.error,"failed to get transaction");return o.result}async getParsedTransactions(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=e.map(e=>{let t=this._buildArgsAtLeastConfirmed([e],r,"jsonParsed",n);return{methodName:"getTransaction",args:t}}),s=await this._rpcBatchRequest(i),o=s.map(e=>{let t=(0,f.Ue)(e,t_);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get transactions");return t.result});return o}async getTransactions(e,t){let{commitment:r,config:n}=extractCommitmentFromConfig(t),i=e.map(e=>{let t=this._buildArgsAtLeastConfirmed([e],r,void 0,n);return{methodName:"getTransaction",args:t}}),s=await this._rpcBatchRequest(i),o=s.map(e=>{let t=(0,f.Ue)(e,tI);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get transactions");let r=t.result;return r?{...r,transaction:{...r.transaction,message:versionedMessageFromResponse(r.version,r.transaction.message)}}:r});return o}async getConfirmedBlock(e,t){let r=this._buildArgsAtLeastConfirmed([e],t),n=await this._rpcRequest("getBlock",r),i=(0,f.Ue)(n,tS);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get confirmed block");let s=i.result;if(!s)throw Error("Confirmed block "+e+" not found");let o={...s,transactions:s.transactions.map(({transaction:e,meta:t})=>{let r=new Message(e.message);return{meta:t,transaction:{...e,message:r}}})};return{...o,transactions:o.transactions.map(({transaction:e,meta:t})=>({meta:t,transaction:Transaction.populate(e.message,e.signatures)}))}}async getBlocks(e,t,r){let n=this._buildArgsAtLeastConfirmed(void 0!==t?[e,t]:[e],r),i=await this._rpcRequest("getBlocks",n),s=(0,f.Ue)(i,jsonRpcResult((0,f.IX)((0,f.Rx)())));if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get blocks");return s.result}async getBlockSignatures(e,t){let r=this._buildArgsAtLeastConfirmed([e],t,void 0,{transactionDetails:"signatures",rewards:!1}),n=await this._rpcRequest("getBlock",r),i=(0,f.Ue)(n,tw);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get block");let s=i.result;if(!s)throw Error("Block "+e+" not found");return s}async getConfirmedBlockSignatures(e,t){let r=this._buildArgsAtLeastConfirmed([e],t,void 0,{transactionDetails:"signatures",rewards:!1}),n=await this._rpcRequest("getBlock",r),i=(0,f.Ue)(n,tw);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get confirmed block");let s=i.result;if(!s)throw Error("Confirmed block "+e+" not found");return s}async getConfirmedTransaction(e,t){let r=this._buildArgsAtLeastConfirmed([e],t),n=await this._rpcRequest("getTransaction",r),i=(0,f.Ue)(n,tI);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get transaction");let s=i.result;if(!s)return s;let o=new Message(s.transaction.message),a=s.transaction.signatures;return{...s,transaction:Transaction.populate(o,a)}}async getParsedConfirmedTransaction(e,t){let r=this._buildArgsAtLeastConfirmed([e],t,"jsonParsed"),n=await this._rpcRequest("getTransaction",r),i=(0,f.Ue)(n,t_);if("error"in i)throw new SolanaJSONRPCError(i.error,"failed to get confirmed transaction");return i.result}async getParsedConfirmedTransactions(e,t){let r=e.map(e=>{let r=this._buildArgsAtLeastConfirmed([e],t,"jsonParsed");return{methodName:"getTransaction",args:r}}),n=await this._rpcBatchRequest(r),i=n.map(e=>{let t=(0,f.Ue)(e,t_);if("error"in t)throw new SolanaJSONRPCError(t.error,"failed to get confirmed transactions");return t.result});return i}async getConfirmedSignaturesForAddress(e,t,r){let n={},i=await this.getFirstAvailableBlock();for(;!("until"in n)&&!(--t<=0)&&!(t<i);)try{let e=await this.getConfirmedBlockSignatures(t,"finalized");e.signatures.length>0&&(n.until=e.signatures[e.signatures.length-1].toString())}catch(e){if(e instanceof Error&&e.message.includes("skipped"))continue;throw e}let s=await this.getSlot("finalized");for(;!("before"in n)&&!(++r>s);)try{let e=await this.getConfirmedBlockSignatures(r);e.signatures.length>0&&(n.before=e.signatures[e.signatures.length-1].toString())}catch(e){if(e instanceof Error&&e.message.includes("skipped"))continue;throw e}let o=await this.getConfirmedSignaturesForAddress2(e,n);return o.map(e=>e.signature)}async getConfirmedSignaturesForAddress2(e,t,r){let n=this._buildArgsAtLeastConfirmed([e.toBase58()],r,void 0,t),i=await this._rpcRequest("getConfirmedSignaturesForAddress2",n),s=(0,f.Ue)(i,eM);if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get confirmed signatures for address");return s.result}async getSignaturesForAddress(e,t,r){let n=this._buildArgsAtLeastConfirmed([e.toBase58()],r,void 0,t),i=await this._rpcRequest("getSignaturesForAddress",n),s=(0,f.Ue)(i,eV);if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get signatures for address");return s.result}async getAddressLookupTable(e,t){let{context:r,value:n}=await this.getAccountInfoAndContext(e,t),i=null;return null!==n&&(i=new AddressLookupTableAccount({key:e,state:AddressLookupTableAccount.deserialize(n.data)})),{context:r,value:i}}async getNonceAndContext(e,t){let{context:r,value:n}=await this.getAccountInfoAndContext(e,t),i=null;return null!==n&&(i=NonceAccount.fromAccountData(n.data)),{context:r,value:i}}async getNonce(e,t){return await this.getNonceAndContext(e,t).then(e=>e.value).catch(t=>{throw Error("failed to get nonce for account "+e.toBase58()+": "+t)})}async requestAirdrop(e,t){let r=await this._rpcRequest("requestAirdrop",[e.toBase58(),t]),n=(0,f.Ue)(r,tC);if("error"in n)throw new SolanaJSONRPCError(n.error,`airdrop to ${e.toBase58()} failed`);return n.result}async _blockhashWithExpiryBlockHeight(e){if(!e){for(;this._pollingBlockhash;)await sleep(100);let e=Date.now()-this._blockhashInfo.lastFetch;if(null!==this._blockhashInfo.latestBlockhash&&!(e>=ea))return this._blockhashInfo.latestBlockhash}return await this._pollNewBlockhash()}async _pollNewBlockhash(){this._pollingBlockhash=!0;try{let e=Date.now(),t=this._blockhashInfo.latestBlockhash,r=t?t.blockhash:null;for(let e=0;e<50;e++){let e=await this.getLatestBlockhash("finalized");if(r!==e.blockhash)return this._blockhashInfo={latestBlockhash:e,lastFetch:Date.now(),transactionSignatures:[],simulatedSignatures:[]},e;await sleep(200)}throw Error(`Unable to obtain a new blockhash after ${Date.now()-e}ms`)}finally{this._pollingBlockhash=!1}}async getStakeMinimumDelegation(e){let{commitment:t,config:r}=extractCommitmentFromConfig(e),n=this._buildArgs([],t,"base64",r),i=await this._rpcRequest("getStakeMinimumDelegation",n),s=(0,f.Ue)(i,jsonRpcResultAndContext((0,f.Rx)()));if("error"in s)throw new SolanaJSONRPCError(s.error,"failed to get stake minimum delegation");return s.result}async simulateTransaction(e,t,r){let n;if("message"in e){let n=e.serialize(),i=a.Buffer.from(n).toString("base64");if(Array.isArray(t)||void 0!==r)throw Error("Invalid arguments");let s=t||{};s.encoding="base64","commitment"in s||(s.commitment=this.commitment),t&&"object"==typeof t&&"innerInstructions"in t&&(s.innerInstructions=t.innerInstructions);let o=[i,s],c=await this._rpcRequest("simulateTransaction",o),u=(0,f.Ue)(c,eI);if("error"in u)throw Error("failed to simulate transaction: "+u.error.message);return u.result}if(e instanceof Transaction?((n=new Transaction).feePayer=e.feePayer,n.instructions=e.instructions,n.nonceInfo=e.nonceInfo,n.signatures=e.signatures):(n=Transaction.populate(e))._message=n._json=void 0,void 0!==t&&!Array.isArray(t))throw Error("Invalid arguments");if(n.nonceInfo&&t)n.sign(...t);else{let e=this._disableBlockhashCaching;for(;;){let r=await this._blockhashWithExpiryBlockHeight(e);if(n.lastValidBlockHeight=r.lastValidBlockHeight,n.recentBlockhash=r.blockhash,!t)break;if(n.sign(...t),!n.signature)throw Error("!signature");let i=n.signature.toString("base64");if(this._blockhashInfo.simulatedSignatures.includes(i)||this._blockhashInfo.transactionSignatures.includes(i))e=!0;else{this._blockhashInfo.simulatedSignatures.push(i);break}}}let i=n._compile(),s=i.serialize(),o=n._serialize(s),c=o.toString("base64"),u={encoding:"base64",commitment:this.commitment};if(r){let e=(Array.isArray(r)?r:i.nonProgramIds()).map(e=>e.toBase58());u.accounts={encoding:"base64",addresses:e}}t&&(u.sigVerify=!0),t&&"object"==typeof t&&"innerInstructions"in t&&(u.innerInstructions=t.innerInstructions);let l=[c,u],d=await this._rpcRequest("simulateTransaction",l),h=(0,f.Ue)(d,eI);if("error"in h){let e;if("data"in h.error&&(e=h.error.data.logs)&&Array.isArray(e)){let t="\n    ",r=t+e.join(t);console.error(h.error.message,r)}throw new SendTransactionError({action:"simulate",signature:"",transactionMessage:h.error.message,logs:e})}return h.result}async sendTransaction(e,t,r){if("version"in e){if(t&&Array.isArray(t))throw Error("Invalid arguments");let r=e.serialize();return await this.sendRawTransaction(r,t)}if(void 0===t||!Array.isArray(t))throw Error("Invalid arguments");if(e.nonceInfo)e.sign(...t);else{let r=this._disableBlockhashCaching;for(;;){let n=await this._blockhashWithExpiryBlockHeight(r);if(e.lastValidBlockHeight=n.lastValidBlockHeight,e.recentBlockhash=n.blockhash,e.sign(...t),!e.signature)throw Error("!signature");let i=e.signature.toString("base64");if(this._blockhashInfo.transactionSignatures.includes(i))r=!0;else{this._blockhashInfo.transactionSignatures.push(i);break}}}let n=e.serialize();return await this.sendRawTransaction(n,r)}async sendRawTransaction(e,t){let r=toBuffer(e).toString("base64"),n=await this.sendEncodedTransaction(r,t);return n}async sendEncodedTransaction(e,t){let r={encoding:"base64"},n=t&&t.skipPreflight,i=!0===n?"processed":t&&t.preflightCommitment||this.commitment;t&&null!=t.maxRetries&&(r.maxRetries=t.maxRetries),t&&null!=t.minContextSlot&&(r.minContextSlot=t.minContextSlot),n&&(r.skipPreflight=n),i&&(r.preflightCommitment=i);let s=[e,r],o=await this._rpcRequest("sendTransaction",s),a=(0,f.Ue)(o,tT);if("error"in a){let e;throw"data"in a.error&&(e=a.error.data.logs),new SendTransactionError({action:n?"send":"simulate",signature:"",transactionMessage:a.error.message,logs:e})}return a.result}_wsOnOpen(){this._rpcWebSocketConnected=!0,this._rpcWebSocketHeartbeat=setInterval(()=>{(async()=>{try{await this._rpcWebSocket.notify("ping")}catch{}})()},5e3),this._updateSubscriptions()}_wsOnError(e){this._rpcWebSocketConnected=!1,console.error("ws error:",e.message)}_wsOnClose(e){if(this._rpcWebSocketConnected=!1,this._rpcWebSocketGeneration=(this._rpcWebSocketGeneration+1)%Number.MAX_SAFE_INTEGER,this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null),this._rpcWebSocketHeartbeat&&(clearInterval(this._rpcWebSocketHeartbeat),this._rpcWebSocketHeartbeat=null),1e3===e){this._updateSubscriptions();return}this._subscriptionCallbacksByServerSubscriptionId={},Object.entries(this._subscriptionsByHash).forEach(([e,t])=>{this._setSubscription(e,{...t,state:"pending"})})}_setSubscription(e,t){let r=this._subscriptionsByHash[e]?.state;if(this._subscriptionsByHash[e]=t,r!==t.state){let r=this._subscriptionStateChangeCallbacksByHash[e];r&&r.forEach(e=>{try{e(t.state)}catch{}})}}_onSubscriptionStateChange(e,t){let r=this._subscriptionHashByClientSubscriptionId[e];if(null==r)return()=>{};let n=this._subscriptionStateChangeCallbacksByHash[r]||=new Set;return n.add(t),()=>{n.delete(t),0===n.size&&delete this._subscriptionStateChangeCallbacksByHash[r]}}async _updateSubscriptions(){if(0===Object.keys(this._subscriptionsByHash).length){this._rpcWebSocketConnected&&(this._rpcWebSocketConnected=!1,this._rpcWebSocketIdleTimeout=setTimeout(()=>{this._rpcWebSocketIdleTimeout=null;try{this._rpcWebSocket.close()}catch(e){e instanceof Error&&console.log(`Error when closing socket connection: ${e.message}`)}},500));return}if(null!==this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketConnected=!0),!this._rpcWebSocketConnected){this._rpcWebSocket.connect();return}let e=this._rpcWebSocketGeneration,isCurrentConnectionStillActive=()=>e===this._rpcWebSocketGeneration;await Promise.all(Object.keys(this._subscriptionsByHash).map(async e=>{let t=this._subscriptionsByHash[e];if(void 0!==t)switch(t.state){case"pending":case"unsubscribed":if(0===t.callbacks.size){delete this._subscriptionsByHash[e],"unsubscribed"===t.state&&delete this._subscriptionCallbacksByServerSubscriptionId[t.serverSubscriptionId],await this._updateSubscriptions();return}await (async()=>{let{args:r,method:n}=t;try{this._setSubscription(e,{...t,state:"subscribing"});let i=await this._rpcWebSocket.call(n,r);this._setSubscription(e,{...t,serverSubscriptionId:i,state:"subscribed"}),this._subscriptionCallbacksByServerSubscriptionId[i]=t.callbacks,await this._updateSubscriptions()}catch(i){if(console.error(`Received ${i instanceof Error?"":"JSON-RPC "}error calling \`${n}\``,{args:r,error:i}),!isCurrentConnectionStillActive())return;this._setSubscription(e,{...t,state:"pending"}),await this._updateSubscriptions()}})();break;case"subscribed":0===t.callbacks.size&&await (async()=>{let{serverSubscriptionId:r,unsubscribeMethod:n}=t;if(this._subscriptionsAutoDisposedByRpc.has(r))this._subscriptionsAutoDisposedByRpc.delete(r);else{this._setSubscription(e,{...t,state:"unsubscribing"}),this._setSubscription(e,{...t,state:"unsubscribing"});try{await this._rpcWebSocket.call(n,[r])}catch(r){if(r instanceof Error&&console.error(`${n} error:`,r.message),!isCurrentConnectionStillActive())return;this._setSubscription(e,{...t,state:"subscribed"}),await this._updateSubscriptions();return}}this._setSubscription(e,{...t,state:"unsubscribed"}),await this._updateSubscriptions()})()}}))}_handleServerNotification(e,t){let r=this._subscriptionCallbacksByServerSubscriptionId[e];void 0!==r&&r.forEach(e=>{try{e(...t)}catch(e){console.error(e)}})}_wsOnAccountNotification(e){let{result:t,subscription:r}=(0,f.Ue)(e,e$);this._handleServerNotification(r,[t.value,t.context])}_makeSubscription(e,t){let r=this._nextClientSubscriptionId++,n=ee([e.method,t]),i=this._subscriptionsByHash[n];return void 0===i?this._subscriptionsByHash[n]={...e,args:t,callbacks:new Set([e.callback]),state:"pending"}:i.callbacks.add(e.callback),this._subscriptionHashByClientSubscriptionId[r]=n,this._subscriptionDisposeFunctionsByClientSubscriptionId[r]=async()=>{delete this._subscriptionDisposeFunctionsByClientSubscriptionId[r],delete this._subscriptionHashByClientSubscriptionId[r];let t=this._subscriptionsByHash[n];assert(void 0!==t,`Could not find a \`Subscription\` when tearing down client subscription #${r}`),t.callbacks.delete(e.callback),await this._updateSubscriptions()},this._updateSubscriptions(),r}onAccountChange(e,t,r){let{commitment:n,config:i}=extractCommitmentFromConfig(r),s=this._buildArgs([e.toBase58()],n||this._commitment||"finalized","base64",i);return this._makeSubscription({callback:t,method:"accountSubscribe",unsubscribeMethod:"accountUnsubscribe"},s)}async removeAccountChangeListener(e){await this._unsubscribeClientSubscription(e,"account change")}_wsOnProgramAccountNotification(e){let{result:t,subscription:r}=(0,f.Ue)(e,eG);this._handleServerNotification(r,[{accountId:t.value.pubkey,accountInfo:t.value.account},t.context])}onProgramAccountChange(e,t,r,n){let{commitment:i,config:s}=extractCommitmentFromConfig(r),o=this._buildArgs([e.toBase58()],i||this._commitment||"finalized","base64",s||(n?{filters:applyDefaultMemcmpEncodingToFilters(n)}:void 0));return this._makeSubscription({callback:t,method:"programSubscribe",unsubscribeMethod:"programUnsubscribe"},o)}async removeProgramAccountChangeListener(e){await this._unsubscribeClientSubscription(e,"program account change")}onLogs(e,t,r){let n=this._buildArgs(["object"==typeof e?{mentions:[e.toString()]}:e],r||this._commitment||"finalized");return this._makeSubscription({callback:t,method:"logsSubscribe",unsubscribeMethod:"logsUnsubscribe"},n)}async removeOnLogsListener(e){await this._unsubscribeClientSubscription(e,"logs")}_wsOnLogsNotification(e){let{result:t,subscription:r}=(0,f.Ue)(e,tB);this._handleServerNotification(r,[t.value,t.context])}_wsOnSlotNotification(e){let{result:t,subscription:r}=(0,f.Ue)(e,eZ);this._handleServerNotification(r,[t])}onSlotChange(e){return this._makeSubscription({callback:e,method:"slotSubscribe",unsubscribeMethod:"slotUnsubscribe"},[])}async removeSlotChangeListener(e){await this._unsubscribeClientSubscription(e,"slot change")}_wsOnSlotUpdatesNotification(e){let{result:t,subscription:r}=(0,f.Ue)(e,eY);this._handleServerNotification(r,[t])}onSlotUpdate(e){return this._makeSubscription({callback:e,method:"slotsUpdatesSubscribe",unsubscribeMethod:"slotsUpdatesUnsubscribe"},[])}async removeSlotUpdateListener(e){await this._unsubscribeClientSubscription(e,"slot update")}async _unsubscribeClientSubscription(e,t){let r=this._subscriptionDisposeFunctionsByClientSubscriptionId[e];r?await r():console.warn(`Ignored unsubscribe request because an active subscription with id \`${e}\` for '${t}' events could not be found.`)}_buildArgs(e,t,r,n){let i=t||this._commitment;if(i||r||n){let t={};r&&(t.encoding=r),i&&(t.commitment=i),n&&(t=Object.assign(t,n)),e.push(t)}return e}_buildArgsAtLeastConfirmed(e,t,r,n){let i=t||this._commitment;if(i&&!["confirmed","finalized"].includes(i))throw Error("Using Connection with default commitment: `"+this._commitment+"`, but method requires at least `confirmed`");return this._buildArgs(e,t,r,n)}_wsOnSignatureNotification(e){let{result:t,subscription:r}=(0,f.Ue)(e,eQ);"receivedSignature"!==t.value&&this._subscriptionsAutoDisposedByRpc.add(r),this._handleServerNotification(r,"receivedSignature"===t.value?[{type:"received"},t.context]:[{type:"status",result:t.value},t.context])}onSignature(e,t,r){let n=this._buildArgs([e],r||this._commitment||"finalized"),i=this._makeSubscription({callback:(e,r)=>{if("status"===e.type){t(e.result,r);try{this.removeSignatureListener(i)}catch(e){}}},method:"signatureSubscribe",unsubscribeMethod:"signatureUnsubscribe"},n);return i}onSignatureWithOptions(e,t,r){let{commitment:n,...i}={...r,commitment:r&&r.commitment||this._commitment||"finalized"},s=this._buildArgs([e],n,void 0,i),o=this._makeSubscription({callback:(e,r)=>{t(e,r);try{this.removeSignatureListener(o)}catch(e){}},method:"signatureSubscribe",unsubscribeMethod:"signatureUnsubscribe"},s);return o}async removeSignatureListener(e){await this._unsubscribeClientSubscription(e,"signature result")}_wsOnRootNotification(e){let{result:t,subscription:r}=(0,f.Ue)(e,e0);this._handleServerNotification(r,[t])}onRootChange(e){return this._makeSubscription({callback:e,method:"rootSubscribe",unsubscribeMethod:"rootUnsubscribe"},[])}async removeRootChangeListener(e){await this._unsubscribeClientSubscription(e,"root change")}};let Keypair=class Keypair{constructor(e){this._keypair=void 0,this._keypair=e??generateKeypair()}static generate(){return new Keypair(generateKeypair())}static fromSecretKey(e,t){if(64!==e.byteLength)throw Error("bad secret key size");let r=e.slice(32,64);if(!t||!t.skipValidation){let t=e.slice(0,32),n=R(t);for(let e=0;e<32;e++)if(r[e]!==n[e])throw Error("provided secretKey is invalid")}return new Keypair({publicKey:r,secretKey:e})}static fromSeed(e){let t=R(e),r=new Uint8Array(64);return r.set(e),r.set(t,32),new Keypair({publicKey:t,secretKey:r})}get publicKey(){return new PublicKey(this._keypair.publicKey)}get secretKey(){return new Uint8Array(this._keypair.secretKey)}};let tO=Object.freeze({CreateLookupTable:{index:0,layout:y.n_([y.Jq("instruction"),u64("recentSlot"),y.u8("bumpSeed")])},FreezeLookupTable:{index:1,layout:y.n_([y.Jq("instruction")])},ExtendLookupTable:{index:2,layout:y.n_([y.Jq("instruction"),u64(),y.A9(publicKey(),y.cv(y.Jq(),-8),"addresses")])},DeactivateLookupTable:{index:3,layout:y.n_([y.Jq("instruction")])},CloseLookupTable:{index:4,layout:y.n_([y.Jq("instruction")])}});let AddressLookupTableInstruction=class AddressLookupTableInstruction{constructor(){}static decodeInstructionType(e){let t;this.checkProgramId(e.programId);let r=y.Jq("instruction"),n=r.decode(e.data);for(let[e,r]of Object.entries(tO))if(r.index==n){t=e;break}if(!t)throw Error("Invalid Instruction. Should be a LookupTable Instruction");return t}static decodeCreateLookupTable(e){this.checkProgramId(e.programId),this.checkKeysLength(e.keys,4);let{recentSlot:t}=decodeData$1(tO.CreateLookupTable,e.data);return{authority:e.keys[1].pubkey,payer:e.keys[2].pubkey,recentSlot:Number(t)}}static decodeExtendLookupTable(e){if(this.checkProgramId(e.programId),e.keys.length<2)throw Error(`invalid instruction; found ${e.keys.length} keys, expected at least 2`);let{addresses:t}=decodeData$1(tO.ExtendLookupTable,e.data);return{lookupTable:e.keys[0].pubkey,authority:e.keys[1].pubkey,payer:e.keys.length>2?e.keys[2].pubkey:void 0,addresses:t.map(e=>new PublicKey(e))}}static decodeCloseLookupTable(e){return this.checkProgramId(e.programId),this.checkKeysLength(e.keys,3),{lookupTable:e.keys[0].pubkey,authority:e.keys[1].pubkey,recipient:e.keys[2].pubkey}}static decodeFreezeLookupTable(e){return this.checkProgramId(e.programId),this.checkKeysLength(e.keys,2),{lookupTable:e.keys[0].pubkey,authority:e.keys[1].pubkey}}static decodeDeactivateLookupTable(e){return this.checkProgramId(e.programId),this.checkKeysLength(e.keys,2),{lookupTable:e.keys[0].pubkey,authority:e.keys[1].pubkey}}static checkProgramId(e){if(!e.equals(AddressLookupTableProgram.programId))throw Error("invalid instruction; programId is not AddressLookupTable Program")}static checkKeysLength(e,t){if(e.length<t)throw Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}};let AddressLookupTableProgram=class AddressLookupTableProgram{constructor(){}static createLookupTable(e){let[t,r]=PublicKey.findProgramAddressSync([e.authority.toBuffer(),(0,m.bP)().encode(e.recentSlot)],this.programId),n=tO.CreateLookupTable,i=encodeData(n,{recentSlot:BigInt(e.recentSlot),bumpSeed:r}),s=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1},{pubkey:e.payer,isSigner:!0,isWritable:!0},{pubkey:SystemProgram.programId,isSigner:!1,isWritable:!1}];return[new TransactionInstruction({programId:this.programId,keys:s,data:i}),t]}static freezeLookupTable(e){let t=tO.FreezeLookupTable,r=encodeData(t),n=[{pubkey:e.lookupTable,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1}];return new TransactionInstruction({programId:this.programId,keys:n,data:r})}static extendLookupTable(e){let t=tO.ExtendLookupTable,r=encodeData(t,{addresses:e.addresses.map(e=>e.toBytes())}),n=[{pubkey:e.lookupTable,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1}];return e.payer&&n.push({pubkey:e.payer,isSigner:!0,isWritable:!0},{pubkey:SystemProgram.programId,isSigner:!1,isWritable:!1}),new TransactionInstruction({programId:this.programId,keys:n,data:r})}static deactivateLookupTable(e){let t=tO.DeactivateLookupTable,r=encodeData(t),n=[{pubkey:e.lookupTable,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1}];return new TransactionInstruction({programId:this.programId,keys:n,data:r})}static closeLookupTable(e){let t=tO.CloseLookupTable,r=encodeData(t),n=[{pubkey:e.lookupTable,isSigner:!1,isWritable:!0},{pubkey:e.authority,isSigner:!0,isWritable:!1},{pubkey:e.recipient,isSigner:!1,isWritable:!0}];return new TransactionInstruction({programId:this.programId,keys:n,data:r})}};AddressLookupTableProgram.programId=new PublicKey("AddressLookupTab1e1111111111111111111111111");let ComputeBudgetInstruction=class ComputeBudgetInstruction{constructor(){}static decodeInstructionType(e){let t;this.checkProgramId(e.programId);let r=y.u8("instruction"),n=r.decode(e.data);for(let[e,r]of Object.entries(tL))if(r.index==n){t=e;break}if(!t)throw Error("Instruction type incorrect; not a ComputeBudgetInstruction");return t}static decodeRequestUnits(e){this.checkProgramId(e.programId);let{units:t,additionalFee:r}=decodeData$1(tL.RequestUnits,e.data);return{units:t,additionalFee:r}}static decodeRequestHeapFrame(e){this.checkProgramId(e.programId);let{bytes:t}=decodeData$1(tL.RequestHeapFrame,e.data);return{bytes:t}}static decodeSetComputeUnitLimit(e){this.checkProgramId(e.programId);let{units:t}=decodeData$1(tL.SetComputeUnitLimit,e.data);return{units:t}}static decodeSetComputeUnitPrice(e){this.checkProgramId(e.programId);let{microLamports:t}=decodeData$1(tL.SetComputeUnitPrice,e.data);return{microLamports:t}}static checkProgramId(e){if(!e.equals(ComputeBudgetProgram.programId))throw Error("invalid instruction; programId is not ComputeBudgetProgram")}};let tL=Object.freeze({RequestUnits:{index:0,layout:y.n_([y.u8("instruction"),y.Jq("units"),y.Jq("additionalFee")])},RequestHeapFrame:{index:1,layout:y.n_([y.u8("instruction"),y.Jq("bytes")])},SetComputeUnitLimit:{index:2,layout:y.n_([y.u8("instruction"),y.Jq("units")])},SetComputeUnitPrice:{index:3,layout:y.n_([y.u8("instruction"),u64("microLamports")])}});let ComputeBudgetProgram=class ComputeBudgetProgram{constructor(){}static requestUnits(e){let t=tL.RequestUnits,r=encodeData(t,e);return new TransactionInstruction({keys:[],programId:this.programId,data:r})}static requestHeapFrame(e){let t=tL.RequestHeapFrame,r=encodeData(t,e);return new TransactionInstruction({keys:[],programId:this.programId,data:r})}static setComputeUnitLimit(e){let t=tL.SetComputeUnitLimit,r=encodeData(t,e);return new TransactionInstruction({keys:[],programId:this.programId,data:r})}static setComputeUnitPrice(e){let t=tL.SetComputeUnitPrice,r=encodeData(t,{microLamports:BigInt(e.microLamports)});return new TransactionInstruction({keys:[],programId:this.programId,data:r})}};ComputeBudgetProgram.programId=new PublicKey("ComputeBudget111111111111111111111111111111");let tN=y.n_([y.u8("numSignatures"),y.u8("padding"),y.KB("signatureOffset"),y.KB("signatureInstructionIndex"),y.KB("publicKeyOffset"),y.KB("publicKeyInstructionIndex"),y.KB("messageDataOffset"),y.KB("messageDataSize"),y.KB("messageInstructionIndex")]);let Ed25519Program=class Ed25519Program{constructor(){}static createInstructionWithPublicKey(e){let{publicKey:t,message:r,signature:n,instructionIndex:i}=e;assert(32===t.length,`Public Key must be 32 bytes but received ${t.length} bytes`),assert(64===n.length,`Signature must be 64 bytes but received ${n.length} bytes`);let s=tN.span,o=s+t.length,c=o+n.length,u=a.Buffer.alloc(c+r.length),l=null==i?65535:i;return tN.encode({numSignatures:1,padding:0,signatureOffset:o,signatureInstructionIndex:l,publicKeyOffset:s,publicKeyInstructionIndex:l,messageDataOffset:c,messageDataSize:r.length,messageInstructionIndex:l},u),u.fill(t,s),u.fill(n,o),u.fill(r,c),new TransactionInstruction({keys:[],programId:Ed25519Program.programId,data:u})}static createInstructionWithPrivateKey(e){let{privateKey:t,message:r,instructionIndex:n}=e;assert(64===t.length,`Private key must be 64 bytes but received ${t.length} bytes`);try{let e=Keypair.fromSecretKey(t),i=e.publicKey.toBytes(),s=sign(r,e.secretKey);return this.createInstructionWithPublicKey({publicKey:i,message:r,signature:s,instructionIndex:n})}catch(e){throw Error(`Error creating instruction; ${e}`)}}};Ed25519Program.programId=new PublicKey("Ed25519SigVerify111111111111111111111111111");let ecdsaSign=(e,t)=>{let r=I.kA.sign(e,t);return[r.toCompactRawBytes(),r.recovery]};I.kA.utils.isValidPrivateKey;let tW=I.kA.getPublicKey,tz=y.n_([y.u8("numSignatures"),y.KB("signatureOffset"),y.u8("signatureInstructionIndex"),y.KB("ethAddressOffset"),y.u8("ethAddressInstructionIndex"),y.KB("messageDataOffset"),y.KB("messageDataSize"),y.u8("messageInstructionIndex"),y.Ik(20,"ethAddress"),y.Ik(64,"signature"),y.u8("recoveryId")]);let Secp256k1Program=class Secp256k1Program{constructor(){}static publicKeyToEthAddress(e){assert(64===e.length,`Public key must be 64 bytes but received ${e.length} bytes`);try{return a.Buffer.from((0,w.fr)(toBuffer(e))).slice(-20)}catch(e){throw Error(`Error constructing Ethereum address: ${e}`)}}static createInstructionWithPublicKey(e){let{publicKey:t,message:r,signature:n,recoveryId:i,instructionIndex:s}=e;return Secp256k1Program.createInstructionWithEthAddress({ethAddress:Secp256k1Program.publicKeyToEthAddress(t),message:r,signature:n,recoveryId:i,instructionIndex:s})}static createInstructionWithEthAddress(e){let t;let{ethAddress:r,message:n,signature:i,recoveryId:s,instructionIndex:o=0}=e;assert(20===(t="string"==typeof r?r.startsWith("0x")?a.Buffer.from(r.substr(2),"hex"):a.Buffer.from(r,"hex"):r).length,`Address must be 20 bytes but received ${t.length} bytes`);let c=12+t.length,u=c+i.length+1,l=a.Buffer.alloc(tz.span+n.length);return tz.encode({numSignatures:1,signatureOffset:c,signatureInstructionIndex:o,ethAddressOffset:12,ethAddressInstructionIndex:o,messageDataOffset:u,messageDataSize:n.length,messageInstructionIndex:o,signature:toBuffer(i),ethAddress:toBuffer(t),recoveryId:s},l),l.fill(toBuffer(n),tz.span),new TransactionInstruction({keys:[],programId:Secp256k1Program.programId,data:l})}static createInstructionWithPrivateKey(e){let{privateKey:t,message:r,instructionIndex:n}=e;assert(32===t.length,`Private key must be 32 bytes but received ${t.length} bytes`);try{let e=toBuffer(t),i=tW(e,!1).slice(1),s=a.Buffer.from((0,w.fr)(toBuffer(r))),[o,c]=ecdsaSign(s,e);return this.createInstructionWithPublicKey({publicKey:i,message:r,signature:o,recoveryId:c,instructionIndex:n})}catch(e){throw Error(`Error creating instruction; ${e}`)}}};Secp256k1Program.programId=new PublicKey("KeccakSecp256k11111111111111111111111111111");let tU=new PublicKey("StakeConfig11111111111111111111111111111111");let Authorized=class Authorized{constructor(e,t){this.staker=void 0,this.withdrawer=void 0,this.staker=e,this.withdrawer=t}};let Lockup=class Lockup{constructor(e,t,r){this.unixTimestamp=void 0,this.epoch=void 0,this.custodian=void 0,this.unixTimestamp=e,this.epoch=t,this.custodian=r}};Lockup.default=new Lockup(0,0,PublicKey.default);let StakeInstruction=class StakeInstruction{constructor(){}static decodeInstructionType(e){let t;this.checkProgramId(e.programId);let r=y.Jq("instruction"),n=r.decode(e.data);for(let[e,r]of Object.entries(tq))if(r.index==n){t=e;break}if(!t)throw Error("Instruction type incorrect; not a StakeInstruction");return t}static decodeInitialize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);let{authorized:t,lockup:r}=decodeData$1(tq.Initialize,e.data);return{stakePubkey:e.keys[0].pubkey,authorized:new Authorized(new PublicKey(t.staker),new PublicKey(t.withdrawer)),lockup:new Lockup(r.unixTimestamp,r.epoch,new PublicKey(r.custodian))}}static decodeDelegate(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,6),decodeData$1(tq.Delegate,e.data),{stakePubkey:e.keys[0].pubkey,votePubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[5].pubkey}}static decodeAuthorize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);let{newAuthorized:t,stakeAuthorizationType:r}=decodeData$1(tq.Authorize,e.data),n={stakePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey,newAuthorizedPubkey:new PublicKey(t),stakeAuthorizationType:{index:r}};return e.keys.length>3&&(n.custodianPubkey=e.keys[3].pubkey),n}static decodeAuthorizeWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);let{newAuthorized:t,stakeAuthorizationType:r,authoritySeed:n,authorityOwner:i}=decodeData$1(tq.AuthorizeWithSeed,e.data),s={stakePubkey:e.keys[0].pubkey,authorityBase:e.keys[1].pubkey,authoritySeed:n,authorityOwner:new PublicKey(i),newAuthorizedPubkey:new PublicKey(t),stakeAuthorizationType:{index:r}};return e.keys.length>3&&(s.custodianPubkey=e.keys[3].pubkey),s}static decodeSplit(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);let{lamports:t}=decodeData$1(tq.Split,e.data);return{stakePubkey:e.keys[0].pubkey,splitStakePubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[2].pubkey,lamports:t}}static decodeMerge(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),decodeData$1(tq.Merge,e.data),{stakePubkey:e.keys[0].pubkey,sourceStakePubKey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey}}static decodeWithdraw(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,5);let{lamports:t}=decodeData$1(tq.Withdraw,e.data),r={stakePubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey,lamports:t};return e.keys.length>5&&(r.custodianPubkey=e.keys[5].pubkey),r}static decodeDeactivate(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),decodeData$1(tq.Deactivate,e.data),{stakePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey}}static checkProgramId(e){if(!e.equals(StakeProgram.programId))throw Error("invalid instruction; programId is not StakeProgram")}static checkKeyLength(e,t){if(e.length<t)throw Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}};let tq=Object.freeze({Initialize:{index:0,layout:y.n_([y.Jq("instruction"),((e="authorized")=>y.n_([publicKey("staker"),publicKey("withdrawer")],e))(),((e="lockup")=>y.n_([y.gM("unixTimestamp"),y.gM("epoch"),publicKey("custodian")],e))()])},Authorize:{index:1,layout:y.n_([y.Jq("instruction"),publicKey("newAuthorized"),y.Jq("stakeAuthorizationType")])},Delegate:{index:2,layout:y.n_([y.Jq("instruction")])},Split:{index:3,layout:y.n_([y.Jq("instruction"),y.gM("lamports")])},Withdraw:{index:4,layout:y.n_([y.Jq("instruction"),y.gM("lamports")])},Deactivate:{index:5,layout:y.n_([y.Jq("instruction")])},Merge:{index:7,layout:y.n_([y.Jq("instruction")])},AuthorizeWithSeed:{index:8,layout:y.n_([y.Jq("instruction"),publicKey("newAuthorized"),y.Jq("stakeAuthorizationType"),rustString("authoritySeed"),publicKey("authorityOwner")])}}),tj=Object.freeze({Staker:{index:0},Withdrawer:{index:1}});let StakeProgram=class StakeProgram{constructor(){}static initialize(e){let{stakePubkey:t,authorized:r,lockup:n}=e,i=n||Lockup.default,s=tq.Initialize,o=encodeData(s,{authorized:{staker:toBuffer(r.staker.toBuffer()),withdrawer:toBuffer(r.withdrawer.toBuffer())},lockup:{unixTimestamp:i.unixTimestamp,epoch:i.epoch,custodian:toBuffer(i.custodian.toBuffer())}}),a={keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:D,isSigner:!1,isWritable:!1}],programId:this.programId,data:o};return new TransactionInstruction(a)}static createAccountWithSeed(e){let t=new Transaction;t.add(SystemProgram.createAccountWithSeed({fromPubkey:e.fromPubkey,newAccountPubkey:e.stakePubkey,basePubkey:e.basePubkey,seed:e.seed,lamports:e.lamports,space:this.space,programId:this.programId}));let{stakePubkey:r,authorized:n,lockup:i}=e;return t.add(this.initialize({stakePubkey:r,authorized:n,lockup:i}))}static createAccount(e){let t=new Transaction;t.add(SystemProgram.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.stakePubkey,lamports:e.lamports,space:this.space,programId:this.programId}));let{stakePubkey:r,authorized:n,lockup:i}=e;return t.add(this.initialize({stakePubkey:r,authorized:n,lockup:i}))}static delegate(e){let{stakePubkey:t,authorizedPubkey:r,votePubkey:n}=e,i=tq.Delegate,s=encodeData(i);return new Transaction().add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!1},{pubkey:z,isSigner:!1,isWritable:!1},{pubkey:$,isSigner:!1,isWritable:!1},{pubkey:tU,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:s})}static authorize(e){let{stakePubkey:t,authorizedPubkey:r,newAuthorizedPubkey:n,stakeAuthorizationType:i,custodianPubkey:s}=e,o=tq.Authorize,a=encodeData(o,{newAuthorized:toBuffer(n.toBuffer()),stakeAuthorizationType:i.index}),c=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:z,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}];return s&&c.push({pubkey:s,isSigner:!0,isWritable:!1}),new Transaction().add({keys:c,programId:this.programId,data:a})}static authorizeWithSeed(e){let{stakePubkey:t,authorityBase:r,authoritySeed:n,authorityOwner:i,newAuthorizedPubkey:s,stakeAuthorizationType:o,custodianPubkey:a}=e,c=tq.AuthorizeWithSeed,u=encodeData(c,{newAuthorized:toBuffer(s.toBuffer()),stakeAuthorizationType:o.index,authoritySeed:n,authorityOwner:toBuffer(i.toBuffer())}),l=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1},{pubkey:z,isSigner:!1,isWritable:!1}];return a&&l.push({pubkey:a,isSigner:!0,isWritable:!1}),new Transaction().add({keys:l,programId:this.programId,data:u})}static splitInstruction(e){let{stakePubkey:t,authorizedPubkey:r,splitStakePubkey:n,lamports:i}=e,s=tq.Split,o=encodeData(s,{lamports:i});return new TransactionInstruction({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:o})}static split(e,t){let r=new Transaction;return r.add(SystemProgram.createAccount({fromPubkey:e.authorizedPubkey,newAccountPubkey:e.splitStakePubkey,lamports:t,space:this.space,programId:this.programId})),r.add(this.splitInstruction(e))}static splitWithSeed(e,t){let{stakePubkey:r,authorizedPubkey:n,splitStakePubkey:i,basePubkey:s,seed:o,lamports:a}=e,c=new Transaction;return c.add(SystemProgram.allocate({accountPubkey:i,basePubkey:s,seed:o,space:this.space,programId:this.programId})),t&&t>0&&c.add(SystemProgram.transfer({fromPubkey:e.authorizedPubkey,toPubkey:i,lamports:t})),c.add(this.splitInstruction({stakePubkey:r,authorizedPubkey:n,splitStakePubkey:i,lamports:a}))}static merge(e){let{stakePubkey:t,sourceStakePubKey:r,authorizedPubkey:n}=e,i=tq.Merge,s=encodeData(i);return new Transaction().add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:z,isSigner:!1,isWritable:!1},{pubkey:$,isSigner:!1,isWritable:!1},{pubkey:n,isSigner:!0,isWritable:!1}],programId:this.programId,data:s})}static withdraw(e){let{stakePubkey:t,authorizedPubkey:r,toPubkey:n,lamports:i,custodianPubkey:s}=e,o=tq.Withdraw,a=encodeData(o,{lamports:i}),c=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:z,isSigner:!1,isWritable:!1},{pubkey:$,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return s&&c.push({pubkey:s,isSigner:!0,isWritable:!1}),new Transaction().add({keys:c,programId:this.programId,data:a})}static deactivate(e){let{stakePubkey:t,authorizedPubkey:r}=e,n=tq.Deactivate,i=encodeData(n);return new Transaction().add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:z,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:i})}};StakeProgram.programId=new PublicKey("Stake11111111111111111111111111111111111111"),StakeProgram.space=200;let VoteInit=class VoteInit{constructor(e,t,r,n){this.nodePubkey=void 0,this.authorizedVoter=void 0,this.authorizedWithdrawer=void 0,this.commission=void 0,this.nodePubkey=e,this.authorizedVoter=t,this.authorizedWithdrawer=r,this.commission=n}};let VoteInstruction=class VoteInstruction{constructor(){}static decodeInstructionType(e){let t;this.checkProgramId(e.programId);let r=y.Jq("instruction"),n=r.decode(e.data);for(let[e,r]of Object.entries(tD))if(r.index==n){t=e;break}if(!t)throw Error("Instruction type incorrect; not a VoteInstruction");return t}static decodeInitializeAccount(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,4);let{voteInit:t}=decodeData$1(tD.InitializeAccount,e.data);return{votePubkey:e.keys[0].pubkey,nodePubkey:e.keys[3].pubkey,voteInit:new VoteInit(new PublicKey(t.nodePubkey),new PublicKey(t.authorizedVoter),new PublicKey(t.authorizedWithdrawer),t.commission)}}static decodeAuthorize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);let{newAuthorized:t,voteAuthorizationType:r}=decodeData$1(tD.Authorize,e.data);return{votePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey,newAuthorizedPubkey:new PublicKey(t),voteAuthorizationType:{index:r}}}static decodeAuthorizeWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);let{voteAuthorizeWithSeedArgs:{currentAuthorityDerivedKeyOwnerPubkey:t,currentAuthorityDerivedKeySeed:r,newAuthorized:n,voteAuthorizationType:i}}=decodeData$1(tD.AuthorizeWithSeed,e.data);return{currentAuthorityDerivedKeyBasePubkey:e.keys[2].pubkey,currentAuthorityDerivedKeyOwnerPubkey:new PublicKey(t),currentAuthorityDerivedKeySeed:r,newAuthorizedPubkey:new PublicKey(n),voteAuthorizationType:{index:i},votePubkey:e.keys[0].pubkey}}static decodeWithdraw(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);let{lamports:t}=decodeData$1(tD.Withdraw,e.data);return{votePubkey:e.keys[0].pubkey,authorizedWithdrawerPubkey:e.keys[2].pubkey,lamports:t,toPubkey:e.keys[1].pubkey}}static checkProgramId(e){if(!e.equals(VoteProgram.programId))throw Error("invalid instruction; programId is not VoteProgram")}static checkKeyLength(e,t){if(e.length<t)throw Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}};let tD=Object.freeze({InitializeAccount:{index:0,layout:y.n_([y.Jq("instruction"),((e="voteInit")=>y.n_([publicKey("nodePubkey"),publicKey("authorizedVoter"),publicKey("authorizedWithdrawer"),y.u8("commission")],e))()])},Authorize:{index:1,layout:y.n_([y.Jq("instruction"),publicKey("newAuthorized"),y.Jq("voteAuthorizationType")])},Withdraw:{index:3,layout:y.n_([y.Jq("instruction"),y.gM("lamports")])},UpdateValidatorIdentity:{index:4,layout:y.n_([y.Jq("instruction")])},AuthorizeWithSeed:{index:10,layout:y.n_([y.Jq("instruction"),((e="voteAuthorizeWithSeedArgs")=>y.n_([y.Jq("voteAuthorizationType"),publicKey("currentAuthorityDerivedKeyOwnerPubkey"),rustString("currentAuthorityDerivedKeySeed"),publicKey("newAuthorized")],e))()])}}),tJ=Object.freeze({Voter:{index:0},Withdrawer:{index:1}});let VoteProgram=class VoteProgram{constructor(){}static initializeAccount(e){let{votePubkey:t,nodePubkey:r,voteInit:n}=e,i=tD.InitializeAccount,s=encodeData(i,{voteInit:{nodePubkey:toBuffer(n.nodePubkey.toBuffer()),authorizedVoter:toBuffer(n.authorizedVoter.toBuffer()),authorizedWithdrawer:toBuffer(n.authorizedWithdrawer.toBuffer()),commission:n.commission}}),o={keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:D,isSigner:!1,isWritable:!1},{pubkey:z,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:s};return new TransactionInstruction(o)}static createAccount(e){let t=new Transaction;return t.add(SystemProgram.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.votePubkey,lamports:e.lamports,space:this.space,programId:this.programId})),t.add(this.initializeAccount({votePubkey:e.votePubkey,nodePubkey:e.voteInit.nodePubkey,voteInit:e.voteInit}))}static authorize(e){let{votePubkey:t,authorizedPubkey:r,newAuthorizedPubkey:n,voteAuthorizationType:i}=e,s=tD.Authorize,o=encodeData(s,{newAuthorized:toBuffer(n.toBuffer()),voteAuthorizationType:i.index}),a=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:z,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return new Transaction().add({keys:a,programId:this.programId,data:o})}static authorizeWithSeed(e){let{currentAuthorityDerivedKeyBasePubkey:t,currentAuthorityDerivedKeyOwnerPubkey:r,currentAuthorityDerivedKeySeed:n,newAuthorizedPubkey:i,voteAuthorizationType:s,votePubkey:o}=e,a=tD.AuthorizeWithSeed,c=encodeData(a,{voteAuthorizeWithSeedArgs:{currentAuthorityDerivedKeyOwnerPubkey:toBuffer(r.toBuffer()),currentAuthorityDerivedKeySeed:n,newAuthorized:toBuffer(i.toBuffer()),voteAuthorizationType:s.index}}),u=[{pubkey:o,isSigner:!1,isWritable:!0},{pubkey:z,isSigner:!1,isWritable:!1},{pubkey:t,isSigner:!0,isWritable:!1}];return new Transaction().add({keys:u,programId:this.programId,data:c})}static withdraw(e){let{votePubkey:t,authorizedWithdrawerPubkey:r,lamports:n,toPubkey:i}=e,s=tD.Withdraw,o=encodeData(s,{lamports:n}),a=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:i,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}];return new Transaction().add({keys:a,programId:this.programId,data:o})}static safeWithdraw(e,t,r){if(e.lamports>t-r)throw Error("Withdraw will leave vote account with insufficient funds.");return VoteProgram.withdraw(e)}static updateValidatorIdentity(e){let{votePubkey:t,authorizedWithdrawerPubkey:r,nodePubkey:n}=e,i=tD.UpdateValidatorIdentity,s=encodeData(i),o=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!0,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return new Transaction().add({keys:o,programId:this.programId,data:s})}};VoteProgram.programId=new PublicKey("Vote111111111111111111111111111111111111111"),VoteProgram.space=3762;let tM=new PublicKey("Va1idator1nfo111111111111111111111111111111"),tV=(0,f.dt)({name:(0,f.Z_)(),website:(0,f.jt)((0,f.Z_)()),details:(0,f.jt)((0,f.Z_)()),iconUrl:(0,f.jt)((0,f.Z_)()),keybaseUsername:(0,f.jt)((0,f.Z_)())});let ValidatorInfo=class ValidatorInfo{constructor(e,t){this.key=void 0,this.info=void 0,this.key=e,this.info=t}static fromConfigData(e){let t=[...e],r=decodeLength(t);if(2!==r)return null;let n=[];for(let e=0;e<2;e++){let e=new PublicKey(guardedSplice(t,0,E)),r=1===guardedShift(t);n.push({publicKey:e,isSigner:r})}if(n[0].publicKey.equals(tM)&&n[1].isSigner){let e=rustString().decode(a.Buffer.from(t)),r=JSON.parse(e);return(0,f.hu)(r,tV),new ValidatorInfo(n[1].publicKey,r)}return null}};let t$=new PublicKey("Vote111111111111111111111111111111111111111"),tF=y.n_([publicKey("nodePubkey"),publicKey("authorizedWithdrawer"),y.u8("commission"),y._O(),y.A9(y.n_([y._O("slot"),y.Jq("confirmationCount")]),y.cv(y.Jq(),-8),"votes"),y.u8("rootSlotValid"),y._O("rootSlot"),y._O(),y.A9(y.n_([y._O("epoch"),publicKey("authorizedVoter")]),y.cv(y.Jq(),-8),"authorizedVoters"),y.n_([y.A9(y.n_([publicKey("authorizedPubkey"),y._O("epochOfLastAuthorizedSwitch"),y._O("targetEpoch")]),32,"buf"),y._O("idx"),y.u8("isEmpty")],"priorVoters"),y._O(),y.A9(y.n_([y._O("epoch"),y._O("credits"),y._O("prevCredits")]),y.cv(y.Jq(),-8),"epochCredits"),y.n_([y._O("slot"),y._O("timestamp")],"lastTimestamp")]);let VoteAccount=class VoteAccount{constructor(e){this.nodePubkey=void 0,this.authorizedWithdrawer=void 0,this.commission=void 0,this.rootSlot=void 0,this.votes=void 0,this.authorizedVoters=void 0,this.priorVoters=void 0,this.epochCredits=void 0,this.lastTimestamp=void 0,this.nodePubkey=e.nodePubkey,this.authorizedWithdrawer=e.authorizedWithdrawer,this.commission=e.commission,this.rootSlot=e.rootSlot,this.votes=e.votes,this.authorizedVoters=e.authorizedVoters,this.priorVoters=e.priorVoters,this.epochCredits=e.epochCredits,this.lastTimestamp=e.lastTimestamp}static fromAccountData(e){let t=tF.decode(toBuffer(e),4),r=t.rootSlot;return t.rootSlotValid||(r=null),new VoteAccount({nodePubkey:new PublicKey(t.nodePubkey),authorizedWithdrawer:new PublicKey(t.authorizedWithdrawer),commission:t.commission,votes:t.votes,rootSlot:r,authorizedVoters:t.authorizedVoters.map(parseAuthorizedVoter),priorVoters:getPriorVoters(t.priorVoters),epochCredits:t.epochCredits,lastTimestamp:t.lastTimestamp})}};function parseAuthorizedVoter({authorizedVoter:e,epoch:t}){return{epoch:t,authorizedVoter:new PublicKey(e)}}function parsePriorVoters({authorizedPubkey:e,epochOfLastAuthorizedSwitch:t,targetEpoch:r}){return{authorizedPubkey:new PublicKey(e),epochOfLastAuthorizedSwitch:t,targetEpoch:r}}function getPriorVoters({buf:e,idx:t,isEmpty:r}){return r?[]:[...e.slice(t+1).map(parsePriorVoters),...e.slice(0,t).map(parsePriorVoters)]}let tG={http:{devnet:"http://api.devnet.solana.com",testnet:"http://api.testnet.solana.com","mainnet-beta":"http://api.mainnet-beta.solana.com/"},https:{devnet:"https://api.devnet.solana.com",testnet:"https://api.testnet.solana.com","mainnet-beta":"https://api.mainnet-beta.solana.com/"}};function clusterApiUrl(e,t){let r=!1===t?"http":"https";if(!e)return tG[r].devnet;let n=tG[r][e];if(!n)throw Error(`Unknown ${r} cluster: ${e}`);return n}async function sendAndConfirmRawTransaction(e,t,r,n){let i,s;r&&Object.prototype.hasOwnProperty.call(r,"lastValidBlockHeight")?(i=r,s=n):r&&Object.prototype.hasOwnProperty.call(r,"nonceValue")?(i=r,s=n):s=r;let o=s&&{skipPreflight:s.skipPreflight,preflightCommitment:s.preflightCommitment||s.commitment,minContextSlot:s.minContextSlot},a=await e.sendRawTransaction(t,o),c=s&&s.commitment,u=i?e.confirmTransaction(i,c):e.confirmTransaction(a,c),l=(await u).value;if(l.err){if(null!=a)throw new SendTransactionError({action:o?.skipPreflight?"send":"simulate",signature:a,transactionMessage:`Status: (${JSON.stringify(l)})`});throw Error(`Raw transaction ${a} failed (${JSON.stringify(l)})`)}return a}let tH=1e9}}]);